
Mini_project4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002330  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00002330  000023c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800080  00800080  000023e4  2**0
                  ALLOC
  3 .stab         00002178  00000000  00000000  000023e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014af  00000000  00000000  0000455c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005b6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a206  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aa94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e3       	ldi	r30, 0x30	; 48
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 67 10 	call	0x20ce	; 0x20ce <main>
      8a:	0c 94 96 11 	jmp	0x232c	; 0x232c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2e 11 	jmp	0x225c	; 0x225c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e7       	ldi	r26, 0x78	; 120
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2e 11 	jmp	0x225c	; 0x225c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e7       	ldi	r24, 0x78	; 120
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 36 11 	jmp	0x226c	; 0x226c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 e7       	ldi	r22, 0x78	; 120
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 3e 11 	jmp	0x227c	; 0x227c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 5a 11 	jmp	0x22b4	; 0x22b4 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <__vector_6>:
#include"../../MCAL/DIO/gpio_a.h"

static volatile void(*callBack)(void)=NULL_PTR;

ISR(TIMER1_CAPT_vect)
{
     c9e:	1f 92       	push	r1
     ca0:	0f 92       	push	r0
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	0f 92       	push	r0
     ca6:	11 24       	eor	r1, r1
     ca8:	2f 93       	push	r18
     caa:	3f 93       	push	r19
     cac:	4f 93       	push	r20
     cae:	5f 93       	push	r21
     cb0:	6f 93       	push	r22
     cb2:	7f 93       	push	r23
     cb4:	8f 93       	push	r24
     cb6:	9f 93       	push	r25
     cb8:	af 93       	push	r26
     cba:	bf 93       	push	r27
     cbc:	ef 93       	push	r30
     cbe:	ff 93       	push	r31
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
	if(callBack != NULL_PTR)
     cc8:	80 91 80 00 	lds	r24, 0x0080
     ccc:	90 91 81 00 	lds	r25, 0x0081
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	29 f0       	breq	.+10     	; 0xcde <__vector_6+0x40>
	{
		(*callBack)();
     cd4:	e0 91 80 00 	lds	r30, 0x0080
     cd8:	f0 91 81 00 	lds	r31, 0x0081
     cdc:	09 95       	icall
	}
}
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	ff 91       	pop	r31
     ce4:	ef 91       	pop	r30
     ce6:	bf 91       	pop	r27
     ce8:	af 91       	pop	r26
     cea:	9f 91       	pop	r25
     cec:	8f 91       	pop	r24
     cee:	7f 91       	pop	r23
     cf0:	6f 91       	pop	r22
     cf2:	5f 91       	pop	r21
     cf4:	4f 91       	pop	r20
     cf6:	3f 91       	pop	r19
     cf8:	2f 91       	pop	r18
     cfa:	0f 90       	pop	r0
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	0f 90       	pop	r0
     d00:	1f 90       	pop	r1
     d02:	18 95       	reti

00000d04 <ICU_init>:

void ICU_init(const ICU_configType *Config_Ptr)
{
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	00 d0       	rcall	.+0      	; 0xd0a <ICU_init+0x6>
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	9a 83       	std	Y+2, r25	; 0x02
     d10:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(ICU_PORT_ID,ICU_PIN_ID,PIN_OUTPUT);
     d12:	83 e0       	ldi	r24, 0x03	; 3
     d14:	66 e0       	ldi	r22, 0x06	; 6
     d16:	41 e0       	ldi	r20, 0x01	; 1
     d18:	0e 94 2c 07 	call	0xe58	; 0xe58 <GPIO_setupPinDirection>

	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
     d1c:	ef e4       	ldi	r30, 0x4F	; 79
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	8c e0       	ldi	r24, 0x0C	; 12
     d22:	80 83       	st	Z, r24
	TCCR1B = (TCCR1B&0xF8) | (Config_Ptr->clock);
     d24:	ae e4       	ldi	r26, 0x4E	; 78
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	ee e4       	ldi	r30, 0x4E	; 78
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	98 2f       	mov	r25, r24
     d30:	98 7f       	andi	r25, 0xF8	; 248
     d32:	e9 81       	ldd	r30, Y+1	; 0x01
     d34:	fa 81       	ldd	r31, Y+2	; 0x02
     d36:	81 81       	ldd	r24, Z+1	; 0x01
     d38:	89 2b       	or	r24, r25
     d3a:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B&0xBF)|(Config_Ptr->edge<<6);
     d3c:	ae e4       	ldi	r26, 0x4E	; 78
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	ee e4       	ldi	r30, 0x4E	; 78
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	28 2f       	mov	r18, r24
     d48:	2f 7b       	andi	r18, 0xBF	; 191
     d4a:	e9 81       	ldd	r30, Y+1	; 0x01
     d4c:	fa 81       	ldd	r31, Y+2	; 0x02
     d4e:	80 81       	ld	r24, Z
     d50:	88 2f       	mov	r24, r24
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	00 24       	eor	r0, r0
     d56:	96 95       	lsr	r25
     d58:	87 95       	ror	r24
     d5a:	07 94       	ror	r0
     d5c:	96 95       	lsr	r25
     d5e:	87 95       	ror	r24
     d60:	07 94       	ror	r0
     d62:	98 2f       	mov	r25, r24
     d64:	80 2d       	mov	r24, r0
     d66:	82 2b       	or	r24, r18
     d68:	8c 93       	st	X, r24
	TCNT1 = 0;
     d6a:	ec e4       	ldi	r30, 0x4C	; 76
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	11 82       	std	Z+1, r1	; 0x01
     d70:	10 82       	st	Z, r1
	ICR1=0;
     d72:	e6 e4       	ldi	r30, 0x46	; 70
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	11 82       	std	Z+1, r1	; 0x01
     d78:	10 82       	st	Z, r1
	TIMSK = (TIMSK&0xDF) | (1<<TICIE1);
     d7a:	a9 e5       	ldi	r26, 0x59	; 89
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e9 e5       	ldi	r30, 0x59	; 89
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	80 62       	ori	r24, 0x20	; 32
     d86:	8c 93       	st	X, r24
}
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	08 95       	ret

00000d92 <ICU_setuptEdgeDetectionType>:
void ICU_setuptEdgeDetectionType(const ICU_edgeType edgetype)
{
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	0f 92       	push	r0
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
     d9c:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = (TCCR1B&0xBF)|(edgetype<<6);
     d9e:	ae e4       	ldi	r26, 0x4E	; 78
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	ee e4       	ldi	r30, 0x4E	; 78
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	28 2f       	mov	r18, r24
     daa:	2f 7b       	andi	r18, 0xBF	; 191
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	88 2f       	mov	r24, r24
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	00 24       	eor	r0, r0
     db4:	96 95       	lsr	r25
     db6:	87 95       	ror	r24
     db8:	07 94       	ror	r0
     dba:	96 95       	lsr	r25
     dbc:	87 95       	ror	r24
     dbe:	07 94       	ror	r0
     dc0:	98 2f       	mov	r25, r24
     dc2:	80 2d       	mov	r24, r0
     dc4:	82 2b       	or	r24, r18
     dc6:	8c 93       	st	X, r24
}
     dc8:	0f 90       	pop	r0
     dca:	cf 91       	pop	r28
     dcc:	df 91       	pop	r29
     dce:	08 95       	ret

00000dd0 <ICU_callBack>:
void ICU_callBack(void(*ICU_ptr2fun))
{
     dd0:	df 93       	push	r29
     dd2:	cf 93       	push	r28
     dd4:	00 d0       	rcall	.+0      	; 0xdd6 <ICU_callBack+0x6>
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
     dda:	9a 83       	std	Y+2, r25	; 0x02
     ddc:	89 83       	std	Y+1, r24	; 0x01
	callBack=ICU_ptr2fun;
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	9a 81       	ldd	r25, Y+2	; 0x02
     de2:	90 93 81 00 	sts	0x0081, r25
     de6:	80 93 80 00 	sts	0x0080, r24
}
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	cf 91       	pop	r28
     df0:	df 91       	pop	r29
     df2:	08 95       	ret

00000df4 <ICU_getInputCaptureValue>:
uint16 ICU_getInputCaptureValue(void)
{
     df4:	df 93       	push	r29
     df6:	cf 93       	push	r28
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
     dfc:	e6 e4       	ldi	r30, 0x46	; 70
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	91 81       	ldd	r25, Z+1	; 0x01
}
     e04:	cf 91       	pop	r28
     e06:	df 91       	pop	r29
     e08:	08 95       	ret

00000e0a <ICU_clearTimerValue>:
void ICU_clearTimerValue(void)
{
     e0a:	df 93       	push	r29
     e0c:	cf 93       	push	r28
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
	TCNT1= 0;
     e12:	ec e4       	ldi	r30, 0x4C	; 76
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	11 82       	std	Z+1, r1	; 0x01
     e18:	10 82       	st	Z, r1
}
     e1a:	cf 91       	pop	r28
     e1c:	df 91       	pop	r29
     e1e:	08 95       	ret

00000e20 <ICU_deInit>:
void ICU_deInit(void)
{
     e20:	df 93       	push	r29
     e22:	cf 93       	push	r28
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
     e28:	ef e4       	ldi	r30, 0x4F	; 79
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	10 82       	st	Z, r1
	TCCR1B = 0;
     e2e:	ee e4       	ldi	r30, 0x4E	; 78
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	10 82       	st	Z, r1
	TCNT1 = 0;
     e34:	ec e4       	ldi	r30, 0x4C	; 76
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	11 82       	std	Z+1, r1	; 0x01
     e3a:	10 82       	st	Z, r1
	ICR1= 0;
     e3c:	e6 e4       	ldi	r30, 0x46	; 70
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	11 82       	std	Z+1, r1	; 0x01
     e42:	10 82       	st	Z, r1
	TIMSK &= ~(1<<TICIE1);
     e44:	a9 e5       	ldi	r26, 0x59	; 89
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e9 e5       	ldi	r30, 0x59	; 89
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 7d       	andi	r24, 0xDF	; 223
     e50:	8c 93       	st	X, r24
}
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <GPIO_setupPinDirection>:

#include<avr/io.h>
#include "../../LIBRARIES/common_macros.h"

void GPIO_setupPinDirection(uint8 port_num,uint8 pin_num,GPIO_pinDirection direction)
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	00 d0       	rcall	.+0      	; 0xe5e <GPIO_setupPinDirection+0x6>
     e5e:	00 d0       	rcall	.+0      	; 0xe60 <GPIO_setupPinDirection+0x8>
     e60:	0f 92       	push	r0
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	89 83       	std	Y+1, r24	; 0x01
     e68:	6a 83       	std	Y+2, r22	; 0x02
     e6a:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS))
     e6c:	89 81       	ldd	r24, Y+1	; 0x01
     e6e:	84 30       	cpi	r24, 0x04	; 4
     e70:	08 f0       	brcs	.+2      	; 0xe74 <GPIO_setupPinDirection+0x1c>
     e72:	d5 c0       	rjmp	.+426    	; 0x101e <GPIO_setupPinDirection+0x1c6>
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	88 30       	cpi	r24, 0x08	; 8
     e78:	08 f0       	brcs	.+2      	; 0xe7c <GPIO_setupPinDirection+0x24>
     e7a:	d1 c0       	rjmp	.+418    	; 0x101e <GPIO_setupPinDirection+0x1c6>
	{

	}
	else{
		switch(port_num)
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	3d 83       	std	Y+5, r19	; 0x05
     e84:	2c 83       	std	Y+4, r18	; 0x04
     e86:	8c 81       	ldd	r24, Y+4	; 0x04
     e88:	9d 81       	ldd	r25, Y+5	; 0x05
     e8a:	81 30       	cpi	r24, 0x01	; 1
     e8c:	91 05       	cpc	r25, r1
     e8e:	09 f4       	brne	.+2      	; 0xe92 <GPIO_setupPinDirection+0x3a>
     e90:	43 c0       	rjmp	.+134    	; 0xf18 <GPIO_setupPinDirection+0xc0>
     e92:	2c 81       	ldd	r18, Y+4	; 0x04
     e94:	3d 81       	ldd	r19, Y+5	; 0x05
     e96:	22 30       	cpi	r18, 0x02	; 2
     e98:	31 05       	cpc	r19, r1
     e9a:	2c f4       	brge	.+10     	; 0xea6 <GPIO_setupPinDirection+0x4e>
     e9c:	8c 81       	ldd	r24, Y+4	; 0x04
     e9e:	9d 81       	ldd	r25, Y+5	; 0x05
     ea0:	00 97       	sbiw	r24, 0x00	; 0
     ea2:	71 f0       	breq	.+28     	; 0xec0 <GPIO_setupPinDirection+0x68>
     ea4:	bc c0       	rjmp	.+376    	; 0x101e <GPIO_setupPinDirection+0x1c6>
     ea6:	2c 81       	ldd	r18, Y+4	; 0x04
     ea8:	3d 81       	ldd	r19, Y+5	; 0x05
     eaa:	22 30       	cpi	r18, 0x02	; 2
     eac:	31 05       	cpc	r19, r1
     eae:	09 f4       	brne	.+2      	; 0xeb2 <GPIO_setupPinDirection+0x5a>
     eb0:	5f c0       	rjmp	.+190    	; 0xf70 <GPIO_setupPinDirection+0x118>
     eb2:	8c 81       	ldd	r24, Y+4	; 0x04
     eb4:	9d 81       	ldd	r25, Y+5	; 0x05
     eb6:	83 30       	cpi	r24, 0x03	; 3
     eb8:	91 05       	cpc	r25, r1
     eba:	09 f4       	brne	.+2      	; 0xebe <GPIO_setupPinDirection+0x66>
     ebc:	85 c0       	rjmp	.+266    	; 0xfc8 <GPIO_setupPinDirection+0x170>
     ebe:	af c0       	rjmp	.+350    	; 0x101e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction==PIN_OUTPUT)
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	81 30       	cpi	r24, 0x01	; 1
     ec4:	a1 f4       	brne	.+40     	; 0xeee <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     ec6:	aa e3       	ldi	r26, 0x3A	; 58
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	ea e3       	ldi	r30, 0x3A	; 58
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	48 2f       	mov	r20, r24
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	02 2e       	mov	r0, r18
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <GPIO_setupPinDirection+0x8c>
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	0a 94       	dec	r0
     ee6:	e2 f7       	brpl	.-8      	; 0xee0 <GPIO_setupPinDirection+0x88>
     ee8:	84 2b       	or	r24, r20
     eea:	8c 93       	st	X, r24
     eec:	98 c0       	rjmp	.+304    	; 0x101e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     eee:	aa e3       	ldi	r26, 0x3A	; 58
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	ea e3       	ldi	r30, 0x3A	; 58
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <GPIO_setupPinDirection+0xb4>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <GPIO_setupPinDirection+0xb0>
     f10:	80 95       	com	r24
     f12:	84 23       	and	r24, r20
     f14:	8c 93       	st	X, r24
     f16:	83 c0       	rjmp	.+262    	; 0x101e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction==PIN_OUTPUT)
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	a1 f4       	brne	.+40     	; 0xf46 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     f1e:	a7 e3       	ldi	r26, 0x37	; 55
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e7 e3       	ldi	r30, 0x37	; 55
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <GPIO_setupPinDirection+0xe4>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <GPIO_setupPinDirection+0xe0>
     f40:	84 2b       	or	r24, r20
     f42:	8c 93       	st	X, r24
     f44:	6c c0       	rjmp	.+216    	; 0x101e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     f46:	a7 e3       	ldi	r26, 0x37	; 55
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e7 e3       	ldi	r30, 0x37	; 55
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <GPIO_setupPinDirection+0x10c>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <GPIO_setupPinDirection+0x108>
     f68:	80 95       	com	r24
     f6a:	84 23       	and	r24, r20
     f6c:	8c 93       	st	X, r24
     f6e:	57 c0       	rjmp	.+174    	; 0x101e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction==PIN_OUTPUT)
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	a1 f4       	brne	.+40     	; 0xf9e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     f76:	a4 e3       	ldi	r26, 0x34	; 52
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e4 e3       	ldi	r30, 0x34	; 52
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	48 2f       	mov	r20, r24
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	02 2e       	mov	r0, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <GPIO_setupPinDirection+0x13c>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <GPIO_setupPinDirection+0x138>
     f98:	84 2b       	or	r24, r20
     f9a:	8c 93       	st	X, r24
     f9c:	40 c0       	rjmp	.+128    	; 0x101e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     f9e:	a4 e3       	ldi	r26, 0x34	; 52
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e4 e3       	ldi	r30, 0x34	; 52
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	48 2f       	mov	r20, r24
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 2e       	mov	r0, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <GPIO_setupPinDirection+0x164>
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	0a 94       	dec	r0
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <GPIO_setupPinDirection+0x160>
     fc0:	80 95       	com	r24
     fc2:	84 23       	and	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	2b c0       	rjmp	.+86     	; 0x101e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction==PIN_OUTPUT)
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	81 30       	cpi	r24, 0x01	; 1
     fcc:	a1 f4       	brne	.+40     	; 0xff6 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     fce:	a1 e3       	ldi	r26, 0x31	; 49
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e1 e3       	ldi	r30, 0x31	; 49
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <GPIO_setupPinDirection+0x194>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <GPIO_setupPinDirection+0x190>
     ff0:	84 2b       	or	r24, r20
     ff2:	8c 93       	st	X, r24
     ff4:	14 c0       	rjmp	.+40     	; 0x101e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ff6:	a1 e3       	ldi	r26, 0x31	; 49
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e1 e3       	ldi	r30, 0x31	; 49
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <GPIO_setupPinDirection+0x1bc>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <GPIO_setupPinDirection+0x1b8>
    1018:	80 95       	com	r24
    101a:	84 23       	and	r24, r20
    101c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <GPIO_writePin>:
void GPIO_writePin(uint8 port_num,uint8 pin_num,uint8 value)
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	00 d0       	rcall	.+0      	; 0x1034 <GPIO_writePin+0x6>
    1034:	00 d0       	rcall	.+0      	; 0x1036 <GPIO_writePin+0x8>
    1036:	0f 92       	push	r0
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	89 83       	std	Y+1, r24	; 0x01
    103e:	6a 83       	std	Y+2, r22	; 0x02
    1040:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num>= NUM_OF_PORTS || pin_num>=NUM_OF_PINS)
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	84 30       	cpi	r24, 0x04	; 4
    1046:	08 f0       	brcs	.+2      	; 0x104a <GPIO_writePin+0x1c>
    1048:	d5 c0       	rjmp	.+426    	; 0x11f4 <GPIO_writePin+0x1c6>
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	88 30       	cpi	r24, 0x08	; 8
    104e:	08 f0       	brcs	.+2      	; 0x1052 <GPIO_writePin+0x24>
    1050:	d1 c0       	rjmp	.+418    	; 0x11f4 <GPIO_writePin+0x1c6>
	{

	}
	else
	{
		switch(port_num)
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	3d 83       	std	Y+5, r19	; 0x05
    105a:	2c 83       	std	Y+4, r18	; 0x04
    105c:	8c 81       	ldd	r24, Y+4	; 0x04
    105e:	9d 81       	ldd	r25, Y+5	; 0x05
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	91 05       	cpc	r25, r1
    1064:	09 f4       	brne	.+2      	; 0x1068 <GPIO_writePin+0x3a>
    1066:	43 c0       	rjmp	.+134    	; 0x10ee <GPIO_writePin+0xc0>
    1068:	2c 81       	ldd	r18, Y+4	; 0x04
    106a:	3d 81       	ldd	r19, Y+5	; 0x05
    106c:	22 30       	cpi	r18, 0x02	; 2
    106e:	31 05       	cpc	r19, r1
    1070:	2c f4       	brge	.+10     	; 0x107c <GPIO_writePin+0x4e>
    1072:	8c 81       	ldd	r24, Y+4	; 0x04
    1074:	9d 81       	ldd	r25, Y+5	; 0x05
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	71 f0       	breq	.+28     	; 0x1096 <GPIO_writePin+0x68>
    107a:	bc c0       	rjmp	.+376    	; 0x11f4 <GPIO_writePin+0x1c6>
    107c:	2c 81       	ldd	r18, Y+4	; 0x04
    107e:	3d 81       	ldd	r19, Y+5	; 0x05
    1080:	22 30       	cpi	r18, 0x02	; 2
    1082:	31 05       	cpc	r19, r1
    1084:	09 f4       	brne	.+2      	; 0x1088 <GPIO_writePin+0x5a>
    1086:	5f c0       	rjmp	.+190    	; 0x1146 <GPIO_writePin+0x118>
    1088:	8c 81       	ldd	r24, Y+4	; 0x04
    108a:	9d 81       	ldd	r25, Y+5	; 0x05
    108c:	83 30       	cpi	r24, 0x03	; 3
    108e:	91 05       	cpc	r25, r1
    1090:	09 f4       	brne	.+2      	; 0x1094 <GPIO_writePin+0x66>
    1092:	85 c0       	rjmp	.+266    	; 0x119e <GPIO_writePin+0x170>
    1094:	af c0       	rjmp	.+350    	; 0x11f4 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value==LOGIC_HIGH)
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	81 30       	cpi	r24, 0x01	; 1
    109a:	a1 f4       	brne	.+40     	; 0x10c4 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    109c:	ab e3       	ldi	r26, 0x3B	; 59
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	eb e3       	ldi	r30, 0x3B	; 59
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	48 2f       	mov	r20, r24
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 2e       	mov	r0, r18
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <GPIO_writePin+0x8c>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	0a 94       	dec	r0
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <GPIO_writePin+0x88>
    10be:	84 2b       	or	r24, r20
    10c0:	8c 93       	st	X, r24
    10c2:	98 c0       	rjmp	.+304    	; 0x11f4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    10c4:	ab e3       	ldi	r26, 0x3B	; 59
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	eb e3       	ldi	r30, 0x3B	; 59
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	48 2f       	mov	r20, r24
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	02 2e       	mov	r0, r18
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <GPIO_writePin+0xb4>
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	0a 94       	dec	r0
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <GPIO_writePin+0xb0>
    10e6:	80 95       	com	r24
    10e8:	84 23       	and	r24, r20
    10ea:	8c 93       	st	X, r24
    10ec:	83 c0       	rjmp	.+262    	; 0x11f4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value==LOGIC_HIGH)
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	a1 f4       	brne	.+40     	; 0x111c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    10f4:	a8 e3       	ldi	r26, 0x38	; 56
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e8 e3       	ldi	r30, 0x38	; 56
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	48 2f       	mov	r20, r24
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	02 2e       	mov	r0, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <GPIO_writePin+0xe4>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	0a 94       	dec	r0
    1114:	e2 f7       	brpl	.-8      	; 0x110e <GPIO_writePin+0xe0>
    1116:	84 2b       	or	r24, r20
    1118:	8c 93       	st	X, r24
    111a:	6c c0       	rjmp	.+216    	; 0x11f4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    111c:	a8 e3       	ldi	r26, 0x38	; 56
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e8 e3       	ldi	r30, 0x38	; 56
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	48 2f       	mov	r20, r24
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	02 2e       	mov	r0, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <GPIO_writePin+0x10c>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	0a 94       	dec	r0
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <GPIO_writePin+0x108>
    113e:	80 95       	com	r24
    1140:	84 23       	and	r24, r20
    1142:	8c 93       	st	X, r24
    1144:	57 c0       	rjmp	.+174    	; 0x11f4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value==LOGIC_HIGH)
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	81 30       	cpi	r24, 0x01	; 1
    114a:	a1 f4       	brne	.+40     	; 0x1174 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    114c:	a5 e3       	ldi	r26, 0x35	; 53
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	e5 e3       	ldi	r30, 0x35	; 53
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	48 2f       	mov	r20, r24
    1158:	8a 81       	ldd	r24, Y+2	; 0x02
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	02 2e       	mov	r0, r18
    1164:	02 c0       	rjmp	.+4      	; 0x116a <GPIO_writePin+0x13c>
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	0a 94       	dec	r0
    116c:	e2 f7       	brpl	.-8      	; 0x1166 <GPIO_writePin+0x138>
    116e:	84 2b       	or	r24, r20
    1170:	8c 93       	st	X, r24
    1172:	40 c0       	rjmp	.+128    	; 0x11f4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1174:	a5 e3       	ldi	r26, 0x35	; 53
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e5 e3       	ldi	r30, 0x35	; 53
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	48 2f       	mov	r20, r24
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	02 2e       	mov	r0, r18
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <GPIO_writePin+0x164>
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	0a 94       	dec	r0
    1194:	e2 f7       	brpl	.-8      	; 0x118e <GPIO_writePin+0x160>
    1196:	80 95       	com	r24
    1198:	84 23       	and	r24, r20
    119a:	8c 93       	st	X, r24
    119c:	2b c0       	rjmp	.+86     	; 0x11f4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value==LOGIC_HIGH)
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	a1 f4       	brne	.+40     	; 0x11cc <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    11a4:	a2 e3       	ldi	r26, 0x32	; 50
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e2 e3       	ldi	r30, 0x32	; 50
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	48 2f       	mov	r20, r24
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	02 2e       	mov	r0, r18
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <GPIO_writePin+0x194>
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	0a 94       	dec	r0
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <GPIO_writePin+0x190>
    11c6:	84 2b       	or	r24, r20
    11c8:	8c 93       	st	X, r24
    11ca:	14 c0       	rjmp	.+40     	; 0x11f4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    11cc:	a2 e3       	ldi	r26, 0x32	; 50
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e2 e3       	ldi	r30, 0x32	; 50
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	48 2f       	mov	r20, r24
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	02 2e       	mov	r0, r18
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <GPIO_writePin+0x1bc>
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	0a 94       	dec	r0
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <GPIO_writePin+0x1b8>
    11ee:	80 95       	com	r24
    11f0:	84 23       	and	r24, r20
    11f2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	08 95       	ret

00001204 <GPIO_readPin>:
uint8 GPIO_readPin(uint8 port_num,uint8 pin_num)
{
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	00 d0       	rcall	.+0      	; 0x120a <GPIO_readPin+0x6>
    120a:	00 d0       	rcall	.+0      	; 0x120c <GPIO_readPin+0x8>
    120c:	0f 92       	push	r0
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	8a 83       	std	Y+2, r24	; 0x02
    1214:	6b 83       	std	Y+3, r22	; 0x03
	uint8 res;

	if(port_num>=NUM_OF_PORTS || pin_num>=NUM_OF_PINS)
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	84 30       	cpi	r24, 0x04	; 4
    121a:	18 f4       	brcc	.+6      	; 0x1222 <GPIO_readPin+0x1e>
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	88 30       	cpi	r24, 0x08	; 8
    1220:	10 f0       	brcs	.+4      	; 0x1226 <GPIO_readPin+0x22>
	{
		res=LOGIC_LOW;
    1222:	19 82       	std	Y+1, r1	; 0x01
    1224:	80 c0       	rjmp	.+256    	; 0x1326 <GPIO_readPin+0x122>
	}
	else
	{
		switch(port_num)
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	3d 83       	std	Y+5, r19	; 0x05
    122e:	2c 83       	std	Y+4, r18	; 0x04
    1230:	4c 81       	ldd	r20, Y+4	; 0x04
    1232:	5d 81       	ldd	r21, Y+5	; 0x05
    1234:	41 30       	cpi	r20, 0x01	; 1
    1236:	51 05       	cpc	r21, r1
    1238:	79 f1       	breq	.+94     	; 0x1298 <GPIO_readPin+0x94>
    123a:	8c 81       	ldd	r24, Y+4	; 0x04
    123c:	9d 81       	ldd	r25, Y+5	; 0x05
    123e:	82 30       	cpi	r24, 0x02	; 2
    1240:	91 05       	cpc	r25, r1
    1242:	34 f4       	brge	.+12     	; 0x1250 <GPIO_readPin+0x4c>
    1244:	2c 81       	ldd	r18, Y+4	; 0x04
    1246:	3d 81       	ldd	r19, Y+5	; 0x05
    1248:	21 15       	cp	r18, r1
    124a:	31 05       	cpc	r19, r1
    124c:	69 f0       	breq	.+26     	; 0x1268 <GPIO_readPin+0x64>
    124e:	6b c0       	rjmp	.+214    	; 0x1326 <GPIO_readPin+0x122>
    1250:	4c 81       	ldd	r20, Y+4	; 0x04
    1252:	5d 81       	ldd	r21, Y+5	; 0x05
    1254:	42 30       	cpi	r20, 0x02	; 2
    1256:	51 05       	cpc	r21, r1
    1258:	b9 f1       	breq	.+110    	; 0x12c8 <GPIO_readPin+0xc4>
    125a:	8c 81       	ldd	r24, Y+4	; 0x04
    125c:	9d 81       	ldd	r25, Y+5	; 0x05
    125e:	83 30       	cpi	r24, 0x03	; 3
    1260:	91 05       	cpc	r25, r1
    1262:	09 f4       	brne	.+2      	; 0x1266 <GPIO_readPin+0x62>
    1264:	49 c0       	rjmp	.+146    	; 0x12f8 <GPIO_readPin+0xf4>
    1266:	5f c0       	rjmp	.+190    	; 0x1326 <GPIO_readPin+0x122>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1268:	e9 e3       	ldi	r30, 0x39	; 57
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	88 2f       	mov	r24, r24
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	a9 01       	movw	r20, r18
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <GPIO_readPin+0x7c>
    127c:	55 95       	asr	r21
    127e:	47 95       	ror	r20
    1280:	8a 95       	dec	r24
    1282:	e2 f7       	brpl	.-8      	; 0x127c <GPIO_readPin+0x78>
    1284:	ca 01       	movw	r24, r20
    1286:	81 70       	andi	r24, 0x01	; 1
    1288:	90 70       	andi	r25, 0x00	; 0
    128a:	88 23       	and	r24, r24
    128c:	19 f0       	breq	.+6      	; 0x1294 <GPIO_readPin+0x90>
			{
				res=LOGIC_HIGH;
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	89 83       	std	Y+1, r24	; 0x01
    1292:	49 c0       	rjmp	.+146    	; 0x1326 <GPIO_readPin+0x122>
			}
			else
			{
				res=LOGIC_LOW;
    1294:	19 82       	std	Y+1, r1	; 0x01
    1296:	47 c0       	rjmp	.+142    	; 0x1326 <GPIO_readPin+0x122>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1298:	e6 e3       	ldi	r30, 0x36	; 54
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	88 2f       	mov	r24, r24
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	a9 01       	movw	r20, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <GPIO_readPin+0xac>
    12ac:	55 95       	asr	r21
    12ae:	47 95       	ror	r20
    12b0:	8a 95       	dec	r24
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <GPIO_readPin+0xa8>
    12b4:	ca 01       	movw	r24, r20
    12b6:	81 70       	andi	r24, 0x01	; 1
    12b8:	90 70       	andi	r25, 0x00	; 0
    12ba:	88 23       	and	r24, r24
    12bc:	19 f0       	breq	.+6      	; 0x12c4 <GPIO_readPin+0xc0>
			{
				res=LOGIC_HIGH;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	89 83       	std	Y+1, r24	; 0x01
    12c2:	31 c0       	rjmp	.+98     	; 0x1326 <GPIO_readPin+0x122>
			}
			else
			{
				res=LOGIC_LOW;
    12c4:	19 82       	std	Y+1, r1	; 0x01
    12c6:	2f c0       	rjmp	.+94     	; 0x1326 <GPIO_readPin+0x122>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    12c8:	e3 e3       	ldi	r30, 0x33	; 51
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	88 2f       	mov	r24, r24
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	a9 01       	movw	r20, r18
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <GPIO_readPin+0xdc>
    12dc:	55 95       	asr	r21
    12de:	47 95       	ror	r20
    12e0:	8a 95       	dec	r24
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <GPIO_readPin+0xd8>
    12e4:	ca 01       	movw	r24, r20
    12e6:	81 70       	andi	r24, 0x01	; 1
    12e8:	90 70       	andi	r25, 0x00	; 0
    12ea:	88 23       	and	r24, r24
    12ec:	19 f0       	breq	.+6      	; 0x12f4 <GPIO_readPin+0xf0>
			{
				res=LOGIC_HIGH;
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	89 83       	std	Y+1, r24	; 0x01
    12f2:	19 c0       	rjmp	.+50     	; 0x1326 <GPIO_readPin+0x122>
			}
			else
			{
				res=LOGIC_LOW;
    12f4:	19 82       	std	Y+1, r1	; 0x01
    12f6:	17 c0       	rjmp	.+46     	; 0x1326 <GPIO_readPin+0x122>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    12f8:	e0 e3       	ldi	r30, 0x30	; 48
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	88 2f       	mov	r24, r24
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	a9 01       	movw	r20, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <GPIO_readPin+0x10c>
    130c:	55 95       	asr	r21
    130e:	47 95       	ror	r20
    1310:	8a 95       	dec	r24
    1312:	e2 f7       	brpl	.-8      	; 0x130c <GPIO_readPin+0x108>
    1314:	ca 01       	movw	r24, r20
    1316:	81 70       	andi	r24, 0x01	; 1
    1318:	90 70       	andi	r25, 0x00	; 0
    131a:	88 23       	and	r24, r24
    131c:	19 f0       	breq	.+6      	; 0x1324 <GPIO_readPin+0x120>
			{
				res=LOGIC_HIGH;
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	89 83       	std	Y+1, r24	; 0x01
    1322:	01 c0       	rjmp	.+2      	; 0x1326 <GPIO_readPin+0x122>
			}
			else
			{
				res=LOGIC_LOW;
    1324:	19 82       	std	Y+1, r1	; 0x01
			}
			break;

		}
	}
	return res;
    1326:	89 81       	ldd	r24, Y+1	; 0x01
}
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	cf 91       	pop	r28
    1334:	df 91       	pop	r29
    1336:	08 95       	ret

00001338 <GPIO_setupPortDirection>:
void GPIO_setupPortDirection(uint8 port_num,GPIO_portDirection direction)
{
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	00 d0       	rcall	.+0      	; 0x133e <GPIO_setupPortDirection+0x6>
    133e:	00 d0       	rcall	.+0      	; 0x1340 <GPIO_setupPortDirection+0x8>
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	89 83       	std	Y+1, r24	; 0x01
    1346:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>=NUM_OF_PORTS )
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	84 30       	cpi	r24, 0x04	; 4
    134c:	90 f5       	brcc	.+100    	; 0x13b2 <GPIO_setupPortDirection+0x7a>
	{

	}
	else
	{
		switch(port_num)
    134e:	89 81       	ldd	r24, Y+1	; 0x01
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	3c 83       	std	Y+4, r19	; 0x04
    1356:	2b 83       	std	Y+3, r18	; 0x03
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	9c 81       	ldd	r25, Y+4	; 0x04
    135c:	81 30       	cpi	r24, 0x01	; 1
    135e:	91 05       	cpc	r25, r1
    1360:	d1 f0       	breq	.+52     	; 0x1396 <GPIO_setupPortDirection+0x5e>
    1362:	2b 81       	ldd	r18, Y+3	; 0x03
    1364:	3c 81       	ldd	r19, Y+4	; 0x04
    1366:	22 30       	cpi	r18, 0x02	; 2
    1368:	31 05       	cpc	r19, r1
    136a:	2c f4       	brge	.+10     	; 0x1376 <GPIO_setupPortDirection+0x3e>
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	9c 81       	ldd	r25, Y+4	; 0x04
    1370:	00 97       	sbiw	r24, 0x00	; 0
    1372:	61 f0       	breq	.+24     	; 0x138c <GPIO_setupPortDirection+0x54>
    1374:	1e c0       	rjmp	.+60     	; 0x13b2 <GPIO_setupPortDirection+0x7a>
    1376:	2b 81       	ldd	r18, Y+3	; 0x03
    1378:	3c 81       	ldd	r19, Y+4	; 0x04
    137a:	22 30       	cpi	r18, 0x02	; 2
    137c:	31 05       	cpc	r19, r1
    137e:	81 f0       	breq	.+32     	; 0x13a0 <GPIO_setupPortDirection+0x68>
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	9c 81       	ldd	r25, Y+4	; 0x04
    1384:	83 30       	cpi	r24, 0x03	; 3
    1386:	91 05       	cpc	r25, r1
    1388:	81 f0       	breq	.+32     	; 0x13aa <GPIO_setupPortDirection+0x72>
    138a:	13 c0       	rjmp	.+38     	; 0x13b2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA=direction;
    138c:	ea e3       	ldi	r30, 0x3A	; 58
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	80 83       	st	Z, r24
    1394:	0e c0       	rjmp	.+28     	; 0x13b2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB=direction;
    1396:	e7 e3       	ldi	r30, 0x37	; 55
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	80 83       	st	Z, r24
    139e:	09 c0       	rjmp	.+18     	; 0x13b2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC=direction;
    13a0:	e4 e3       	ldi	r30, 0x34	; 52
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	80 83       	st	Z, r24
    13a8:	04 c0       	rjmp	.+8      	; 0x13b2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD=direction;
    13aa:	e1 e3       	ldi	r30, 0x31	; 49
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	80 83       	st	Z, r24
			break;

		}
	}
}
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	08 95       	ret

000013c0 <GPIO_writePort>:
void GPIO_writePort(uint8 port_num, uint8 value)

{
    13c0:	df 93       	push	r29
    13c2:	cf 93       	push	r28
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <GPIO_writePort+0x6>
    13c6:	00 d0       	rcall	.+0      	; 0x13c8 <GPIO_writePort+0x8>
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>=NUM_OF_PORTS)
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	84 30       	cpi	r24, 0x04	; 4
    13d4:	90 f5       	brcc	.+100    	; 0x143a <GPIO_writePort+0x7a>
	{

	}
	else
	{
		switch(port_num)
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	3c 83       	std	Y+4, r19	; 0x04
    13de:	2b 83       	std	Y+3, r18	; 0x03
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	9c 81       	ldd	r25, Y+4	; 0x04
    13e4:	81 30       	cpi	r24, 0x01	; 1
    13e6:	91 05       	cpc	r25, r1
    13e8:	d1 f0       	breq	.+52     	; 0x141e <GPIO_writePort+0x5e>
    13ea:	2b 81       	ldd	r18, Y+3	; 0x03
    13ec:	3c 81       	ldd	r19, Y+4	; 0x04
    13ee:	22 30       	cpi	r18, 0x02	; 2
    13f0:	31 05       	cpc	r19, r1
    13f2:	2c f4       	brge	.+10     	; 0x13fe <GPIO_writePort+0x3e>
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	9c 81       	ldd	r25, Y+4	; 0x04
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	61 f0       	breq	.+24     	; 0x1414 <GPIO_writePort+0x54>
    13fc:	1e c0       	rjmp	.+60     	; 0x143a <GPIO_writePort+0x7a>
    13fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1400:	3c 81       	ldd	r19, Y+4	; 0x04
    1402:	22 30       	cpi	r18, 0x02	; 2
    1404:	31 05       	cpc	r19, r1
    1406:	81 f0       	breq	.+32     	; 0x1428 <GPIO_writePort+0x68>
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	9c 81       	ldd	r25, Y+4	; 0x04
    140c:	83 30       	cpi	r24, 0x03	; 3
    140e:	91 05       	cpc	r25, r1
    1410:	81 f0       	breq	.+32     	; 0x1432 <GPIO_writePort+0x72>
    1412:	13 c0       	rjmp	.+38     	; 0x143a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA=value;
    1414:	eb e3       	ldi	r30, 0x3B	; 59
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	80 83       	st	Z, r24
    141c:	0e c0       	rjmp	.+28     	; 0x143a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB=value;
    141e:	e8 e3       	ldi	r30, 0x38	; 56
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	8a 81       	ldd	r24, Y+2	; 0x02
    1424:	80 83       	st	Z, r24
    1426:	09 c0       	rjmp	.+18     	; 0x143a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC=value;
    1428:	e5 e3       	ldi	r30, 0x35	; 53
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	80 83       	st	Z, r24
    1430:	04 c0       	rjmp	.+8      	; 0x143a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD=value;
    1432:	e2 e3       	ldi	r30, 0x32	; 50
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	80 83       	st	Z, r24
			break;
		}
	}
}
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <GPIO_readPort>:
uint8 GPIO_readPort(uint8 port_num)
{
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	00 d0       	rcall	.+0      	; 0x144e <GPIO_readPort+0x6>
    144e:	00 d0       	rcall	.+0      	; 0x1450 <GPIO_readPort+0x8>
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	8a 83       	std	Y+2, r24	; 0x02
	uint8 res;
	if(port_num>=NUM_OF_PORTS)
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	84 30       	cpi	r24, 0x04	; 4
    145a:	10 f0       	brcs	.+4      	; 0x1460 <GPIO_readPort+0x18>
	{
		res=LOGIC_LOW;
    145c:	19 82       	std	Y+1, r1	; 0x01
    145e:	32 c0       	rjmp	.+100    	; 0x14c4 <GPIO_readPort+0x7c>
	}
	else
	{
		switch(port_num)
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	3c 83       	std	Y+4, r19	; 0x04
    1468:	2b 83       	std	Y+3, r18	; 0x03
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	9c 81       	ldd	r25, Y+4	; 0x04
    146e:	81 30       	cpi	r24, 0x01	; 1
    1470:	91 05       	cpc	r25, r1
    1472:	d1 f0       	breq	.+52     	; 0x14a8 <GPIO_readPort+0x60>
    1474:	2b 81       	ldd	r18, Y+3	; 0x03
    1476:	3c 81       	ldd	r19, Y+4	; 0x04
    1478:	22 30       	cpi	r18, 0x02	; 2
    147a:	31 05       	cpc	r19, r1
    147c:	2c f4       	brge	.+10     	; 0x1488 <GPIO_readPort+0x40>
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	9c 81       	ldd	r25, Y+4	; 0x04
    1482:	00 97       	sbiw	r24, 0x00	; 0
    1484:	61 f0       	breq	.+24     	; 0x149e <GPIO_readPort+0x56>
    1486:	1e c0       	rjmp	.+60     	; 0x14c4 <GPIO_readPort+0x7c>
    1488:	2b 81       	ldd	r18, Y+3	; 0x03
    148a:	3c 81       	ldd	r19, Y+4	; 0x04
    148c:	22 30       	cpi	r18, 0x02	; 2
    148e:	31 05       	cpc	r19, r1
    1490:	81 f0       	breq	.+32     	; 0x14b2 <GPIO_readPort+0x6a>
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	9c 81       	ldd	r25, Y+4	; 0x04
    1496:	83 30       	cpi	r24, 0x03	; 3
    1498:	91 05       	cpc	r25, r1
    149a:	81 f0       	breq	.+32     	; 0x14bc <GPIO_readPort+0x74>
    149c:	13 c0       	rjmp	.+38     	; 0x14c4 <GPIO_readPort+0x7c>
		{
		case PORTA_ID:
			res=PINA;
    149e:	e9 e3       	ldi	r30, 0x39	; 57
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	0e c0       	rjmp	.+28     	; 0x14c4 <GPIO_readPort+0x7c>
			break;
		case PORTB_ID:
			res=PINB;
    14a8:	e6 e3       	ldi	r30, 0x36	; 54
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	89 83       	std	Y+1, r24	; 0x01
    14b0:	09 c0       	rjmp	.+18     	; 0x14c4 <GPIO_readPort+0x7c>
			break;
		case PORTC_ID:
			res=PINC;
    14b2:	e3 e3       	ldi	r30, 0x33	; 51
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	04 c0       	rjmp	.+8      	; 0x14c4 <GPIO_readPort+0x7c>
			break;
		case PORTD_ID:
			res=PIND;
    14bc:	e0 e3       	ldi	r30, 0x30	; 48
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return res;
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <ULTRASONIC_init>:
#include<avr/io.h>

uint16 a=0,b=0,distance,tick=0,check=0;

void ULTRASONIC_init(void)
{
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	00 d0       	rcall	.+0      	; 0x14da <ULTRASONIC_init+0x6>
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
	ICU_configType config;
	config.clock=F_CPU_8;
    14de:	82 e0       	ldi	r24, 0x02	; 2
    14e0:	8a 83       	std	Y+2, r24	; 0x02
	config.edge=RISING_EDGE;
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	89 83       	std	Y+1, r24	; 0x01
	ICU_init(&config);
    14e6:	ce 01       	movw	r24, r28
    14e8:	01 96       	adiw	r24, 0x01	; 1
    14ea:	0e 94 82 06 	call	0xd04	; 0xd04 <ICU_init>

	ICU_callBack(ULTRASONIC_edgeProcessing);
    14ee:	8a e8       	ldi	r24, 0x8A	; 138
    14f0:	9b e0       	ldi	r25, 0x0B	; 11
    14f2:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <ICU_callBack>

	GPIO_setupPinDirection(ULTRASONIC_TRIGGER_PORT_ID, ULTRASONIC_TRIGGER_PIN_ID, PIN_OUTPUT);
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	65 e0       	ldi	r22, 0x05	; 5
    14fa:	41 e0       	ldi	r20, 0x01	; 1
    14fc:	0e 94 2c 07 	call	0xe58	; 0xe58 <GPIO_setupPinDirection>
}
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <ULTRASONIC_trigger>:

void ULTRASONIC_trigger(void)
{
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	68 97       	sbiw	r28, 0x18	; 24
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	de bf       	out	0x3e, r29	; 62
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	cd bf       	out	0x3d, r28	; 61
	GPIO_writePin(ULTRASONIC_TRIGGER_PORT_ID, ULTRASONIC_TRIGGER_PIN_ID, LOGIC_HIGH);
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	65 e0       	ldi	r22, 0x05	; 5
    1522:	41 e0       	ldi	r20, 0x01	; 1
    1524:	0e 94 17 08 	call	0x102e	; 0x102e <GPIO_writePin>
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	a0 ea       	ldi	r26, 0xA0	; 160
    152e:	b1 e4       	ldi	r27, 0x41	; 65
    1530:	8d 8b       	std	Y+21, r24	; 0x15
    1532:	9e 8b       	std	Y+22, r25	; 0x16
    1534:	af 8b       	std	Y+23, r26	; 0x17
    1536:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1538:	6d 89       	ldd	r22, Y+21	; 0x15
    153a:	7e 89       	ldd	r23, Y+22	; 0x16
    153c:	8f 89       	ldd	r24, Y+23	; 0x17
    153e:	98 8d       	ldd	r25, Y+24	; 0x18
    1540:	2b ea       	ldi	r18, 0xAB	; 171
    1542:	3a ea       	ldi	r19, 0xAA	; 170
    1544:	4a e2       	ldi	r20, 0x2A	; 42
    1546:	50 e4       	ldi	r21, 0x40	; 64
    1548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	89 8b       	std	Y+17, r24	; 0x11
    1552:	9a 8b       	std	Y+18, r25	; 0x12
    1554:	ab 8b       	std	Y+19, r26	; 0x13
    1556:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1558:	69 89       	ldd	r22, Y+17	; 0x11
    155a:	7a 89       	ldd	r23, Y+18	; 0x12
    155c:	8b 89       	ldd	r24, Y+19	; 0x13
    155e:	9c 89       	ldd	r25, Y+20	; 0x14
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	40 e8       	ldi	r20, 0x80	; 128
    1566:	5f e3       	ldi	r21, 0x3F	; 63
    1568:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    156c:	88 23       	and	r24, r24
    156e:	1c f4       	brge	.+6      	; 0x1576 <ULTRASONIC_trigger+0x6c>
		__ticks = 1;
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	88 8b       	std	Y+16, r24	; 0x10
    1574:	91 c0       	rjmp	.+290    	; 0x1698 <ULTRASONIC_trigger+0x18e>
	else if (__tmp > 255)
    1576:	69 89       	ldd	r22, Y+17	; 0x11
    1578:	7a 89       	ldd	r23, Y+18	; 0x12
    157a:	8b 89       	ldd	r24, Y+19	; 0x13
    157c:	9c 89       	ldd	r25, Y+20	; 0x14
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	4f e7       	ldi	r20, 0x7F	; 127
    1584:	53 e4       	ldi	r21, 0x43	; 67
    1586:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    158a:	18 16       	cp	r1, r24
    158c:	0c f0       	brlt	.+2      	; 0x1590 <ULTRASONIC_trigger+0x86>
    158e:	7b c0       	rjmp	.+246    	; 0x1686 <ULTRASONIC_trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1590:	6d 89       	ldd	r22, Y+21	; 0x15
    1592:	7e 89       	ldd	r23, Y+22	; 0x16
    1594:	8f 89       	ldd	r24, Y+23	; 0x17
    1596:	98 8d       	ldd	r25, Y+24	; 0x18
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	4a e7       	ldi	r20, 0x7A	; 122
    159e:	54 e4       	ldi	r21, 0x44	; 68
    15a0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	8c 87       	std	Y+12, r24	; 0x0c
    15aa:	9d 87       	std	Y+13, r25	; 0x0d
    15ac:	ae 87       	std	Y+14, r26	; 0x0e
    15ae:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b0:	6c 85       	ldd	r22, Y+12	; 0x0c
    15b2:	7d 85       	ldd	r23, Y+13	; 0x0d
    15b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    15b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	4a ef       	ldi	r20, 0xFA	; 250
    15be:	54 e4       	ldi	r21, 0x44	; 68
    15c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	88 87       	std	Y+8, r24	; 0x08
    15ca:	99 87       	std	Y+9, r25	; 0x09
    15cc:	aa 87       	std	Y+10, r26	; 0x0a
    15ce:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    15d0:	68 85       	ldd	r22, Y+8	; 0x08
    15d2:	79 85       	ldd	r23, Y+9	; 0x09
    15d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    15d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	40 e8       	ldi	r20, 0x80	; 128
    15de:	5f e3       	ldi	r21, 0x3F	; 63
    15e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15e4:	88 23       	and	r24, r24
    15e6:	2c f4       	brge	.+10     	; 0x15f2 <ULTRASONIC_trigger+0xe8>
		__ticks = 1;
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	9f 83       	std	Y+7, r25	; 0x07
    15ee:	8e 83       	std	Y+6, r24	; 0x06
    15f0:	3f c0       	rjmp	.+126    	; 0x1670 <ULTRASONIC_trigger+0x166>
	else if (__tmp > 65535)
    15f2:	68 85       	ldd	r22, Y+8	; 0x08
    15f4:	79 85       	ldd	r23, Y+9	; 0x09
    15f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    15f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	3f ef       	ldi	r19, 0xFF	; 255
    15fe:	4f e7       	ldi	r20, 0x7F	; 127
    1600:	57 e4       	ldi	r21, 0x47	; 71
    1602:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1606:	18 16       	cp	r1, r24
    1608:	4c f5       	brge	.+82     	; 0x165c <ULTRASONIC_trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    160a:	6c 85       	ldd	r22, Y+12	; 0x0c
    160c:	7d 85       	ldd	r23, Y+13	; 0x0d
    160e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1610:	9f 85       	ldd	r25, Y+15	; 0x0f
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	40 e2       	ldi	r20, 0x20	; 32
    1618:	51 e4       	ldi	r21, 0x41	; 65
    161a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	bc 01       	movw	r22, r24
    1624:	cd 01       	movw	r24, r26
    1626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	9f 83       	std	Y+7, r25	; 0x07
    1630:	8e 83       	std	Y+6, r24	; 0x06
    1632:	0f c0       	rjmp	.+30     	; 0x1652 <ULTRASONIC_trigger+0x148>
    1634:	88 ec       	ldi	r24, 0xC8	; 200
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	9d 83       	std	Y+5, r25	; 0x05
    163a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    163c:	8c 81       	ldd	r24, Y+4	; 0x04
    163e:	9d 81       	ldd	r25, Y+5	; 0x05
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	f1 f7       	brne	.-4      	; 0x1640 <ULTRASONIC_trigger+0x136>
    1644:	9d 83       	std	Y+5, r25	; 0x05
    1646:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1648:	8e 81       	ldd	r24, Y+6	; 0x06
    164a:	9f 81       	ldd	r25, Y+7	; 0x07
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	9f 83       	std	Y+7, r25	; 0x07
    1650:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1652:	8e 81       	ldd	r24, Y+6	; 0x06
    1654:	9f 81       	ldd	r25, Y+7	; 0x07
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	69 f7       	brne	.-38     	; 0x1634 <ULTRASONIC_trigger+0x12a>
    165a:	24 c0       	rjmp	.+72     	; 0x16a4 <ULTRASONIC_trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    165c:	68 85       	ldd	r22, Y+8	; 0x08
    165e:	79 85       	ldd	r23, Y+9	; 0x09
    1660:	8a 85       	ldd	r24, Y+10	; 0x0a
    1662:	9b 85       	ldd	r25, Y+11	; 0x0b
    1664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	9f 83       	std	Y+7, r25	; 0x07
    166e:	8e 83       	std	Y+6, r24	; 0x06
    1670:	8e 81       	ldd	r24, Y+6	; 0x06
    1672:	9f 81       	ldd	r25, Y+7	; 0x07
    1674:	9b 83       	std	Y+3, r25	; 0x03
    1676:	8a 83       	std	Y+2, r24	; 0x02
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	9b 81       	ldd	r25, Y+3	; 0x03
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	f1 f7       	brne	.-4      	; 0x167c <ULTRASONIC_trigger+0x172>
    1680:	9b 83       	std	Y+3, r25	; 0x03
    1682:	8a 83       	std	Y+2, r24	; 0x02
    1684:	0f c0       	rjmp	.+30     	; 0x16a4 <ULTRASONIC_trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1686:	69 89       	ldd	r22, Y+17	; 0x11
    1688:	7a 89       	ldd	r23, Y+18	; 0x12
    168a:	8b 89       	ldd	r24, Y+19	; 0x13
    168c:	9c 89       	ldd	r25, Y+20	; 0x14
    168e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	88 8b       	std	Y+16, r24	; 0x10
    1698:	88 89       	ldd	r24, Y+16	; 0x10
    169a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	8a 95       	dec	r24
    16a0:	f1 f7       	brne	.-4      	; 0x169e <ULTRASONIC_trigger+0x194>
    16a2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(20);
	GPIO_writePin(ULTRASONIC_TRIGGER_PORT_ID, ULTRASONIC_TRIGGER_PIN_ID, LOGIC_LOW);
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	65 e0       	ldi	r22, 0x05	; 5
    16a8:	40 e0       	ldi	r20, 0x00	; 0
    16aa:	0e 94 17 08 	call	0x102e	; 0x102e <GPIO_writePin>
}
    16ae:	68 96       	adiw	r28, 0x18	; 24
    16b0:	0f b6       	in	r0, 0x3f	; 63
    16b2:	f8 94       	cli
    16b4:	de bf       	out	0x3e, r29	; 62
    16b6:	0f be       	out	0x3f, r0	; 63
    16b8:	cd bf       	out	0x3d, r28	; 61
    16ba:	cf 91       	pop	r28
    16bc:	df 91       	pop	r29
    16be:	08 95       	ret

000016c0 <ULTRASONIC_readDistance>:

uint16 ULTRASONIC_readDistance(void)
{
    16c0:	df 93       	push	r29
    16c2:	cf 93       	push	r28
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
	ULTRASONIC_trigger();
    16c8:	0e 94 85 0a 	call	0x150a	; 0x150a <ULTRASONIC_trigger>

	while(tick!=2){}
    16cc:	80 91 86 00 	lds	r24, 0x0086
    16d0:	90 91 87 00 	lds	r25, 0x0087
    16d4:	82 30       	cpi	r24, 0x02	; 2
    16d6:	91 05       	cpc	r25, r1
    16d8:	c9 f7       	brne	.-14     	; 0x16cc <ULTRASONIC_readDistance+0xc>


	distance=ICR1/58;
    16da:	e6 e4       	ldi	r30, 0x46	; 70
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	91 81       	ldd	r25, Z+1	; 0x01
    16e2:	2a e3       	ldi	r18, 0x3A	; 58
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	b9 01       	movw	r22, r18
    16e8:	0e 94 1a 11 	call	0x2234	; 0x2234 <__udivmodhi4>
    16ec:	cb 01       	movw	r24, r22
    16ee:	90 93 8b 00 	sts	0x008B, r25
    16f2:	80 93 8a 00 	sts	0x008A, r24
	check=0;
    16f6:	10 92 89 00 	sts	0x0089, r1
    16fa:	10 92 88 00 	sts	0x0088, r1
	tick=0;
    16fe:	10 92 87 00 	sts	0x0087, r1
    1702:	10 92 86 00 	sts	0x0086, r1


	return distance;
    1706:	80 91 8a 00 	lds	r24, 0x008A
    170a:	90 91 8b 00 	lds	r25, 0x008B

}
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	08 95       	ret

00001714 <ULTRASONIC_edgeProcessing>:

void ULTRASONIC_edgeProcessing(void)
{
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
	tick++;
    171c:	80 91 86 00 	lds	r24, 0x0086
    1720:	90 91 87 00 	lds	r25, 0x0087
    1724:	01 96       	adiw	r24, 0x01	; 1
    1726:	90 93 87 00 	sts	0x0087, r25
    172a:	80 93 86 00 	sts	0x0086, r24
	if(tick==1)
    172e:	80 91 86 00 	lds	r24, 0x0086
    1732:	90 91 87 00 	lds	r25, 0x0087
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	91 05       	cpc	r25, r1
    173a:	31 f4       	brne	.+12     	; 0x1748 <ULTRASONIC_edgeProcessing+0x34>
	{
		ICU_clearTimerValue();
    173c:	0e 94 05 07 	call	0xe0a	; 0xe0a <ICU_clearTimerValue>
		ICU_setuptEdgeDetectionType(FALLING_EDGE);
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	0e 94 c9 06 	call	0xd92	; 0xd92 <ICU_setuptEdgeDetectionType>
    1746:	10 c0       	rjmp	.+32     	; 0x1768 <ULTRASONIC_edgeProcessing+0x54>
	}
	else if(tick==2)
    1748:	80 91 86 00 	lds	r24, 0x0086
    174c:	90 91 87 00 	lds	r25, 0x0087
    1750:	82 30       	cpi	r24, 0x02	; 2
    1752:	91 05       	cpc	r25, r1
    1754:	49 f4       	brne	.+18     	; 0x1768 <ULTRASONIC_edgeProcessing+0x54>
	{
		ICU_setuptEdgeDetectionType(RISING_EDGE);
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	0e 94 c9 06 	call	0xd92	; 0xd92 <ICU_setuptEdgeDetectionType>
	//	tick=0;
		check=1;
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	90 93 89 00 	sts	0x0089, r25
    1764:	80 93 88 00 	sts	0x0088, r24
	}
}
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	08 95       	ret

0000176e <LCD_init>:
#include<util/delay.h>
#include"../../LIBRARIES/common_macros.h"
#include<stdlib.h>

void LCD_init(void)
{
    176e:	df 93       	push	r29
    1770:	cf 93       	push	r28
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID,PIN_OUTPUT);
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	60 e0       	ldi	r22, 0x00	; 0
    177a:	41 e0       	ldi	r20, 0x01	; 1
    177c:	0e 94 2c 07 	call	0xe58	; 0xe58 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	61 e0       	ldi	r22, 0x01	; 1
    1784:	41 e0       	ldi	r20, 0x01	; 1
    1786:	0e 94 2c 07 	call	0xe58	; 0xe58 <GPIO_setupPinDirection>
#if(LCD_BITS_MODE==8)
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	6f ef       	ldi	r22, 0xFF	; 255
    178e:	0e 94 9c 09 	call	0x1338	; 0x1338 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1792:	88 e3       	ldi	r24, 0x38	; 56
    1794:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
#endif
	LCD_sendCommand(LCD_CURSOR_OFF);
    1798:	8c e0       	ldi	r24, 0x0C	; 12
    179a:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <LCD_sendCommand>
}
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <LCD_sendCommand>:
void LCD_sendCommand(uint8 command)
{
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    17b2:	e9 97       	sbiw	r28, 0x39	; 57
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	f8 94       	cli
    17b8:	de bf       	out	0x3e, r29	; 62
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	cd bf       	out	0x3d, r28	; 61
    17be:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	60 e0       	ldi	r22, 0x00	; 0
    17c4:	40 e0       	ldi	r20, 0x00	; 0
    17c6:	0e 94 17 08 	call	0x102e	; 0x102e <GPIO_writePin>
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	a0 e8       	ldi	r26, 0x80	; 128
    17d0:	bf e3       	ldi	r27, 0x3F	; 63
    17d2:	8d ab       	std	Y+53, r24	; 0x35
    17d4:	9e ab       	std	Y+54, r25	; 0x36
    17d6:	af ab       	std	Y+55, r26	; 0x37
    17d8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17da:	6d a9       	ldd	r22, Y+53	; 0x35
    17dc:	7e a9       	ldd	r23, Y+54	; 0x36
    17de:	8f a9       	ldd	r24, Y+55	; 0x37
    17e0:	98 ad       	ldd	r25, Y+56	; 0x38
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	4a ef       	ldi	r20, 0xFA	; 250
    17e8:	54 e4       	ldi	r21, 0x44	; 68
    17ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	89 ab       	std	Y+49, r24	; 0x31
    17f4:	9a ab       	std	Y+50, r25	; 0x32
    17f6:	ab ab       	std	Y+51, r26	; 0x33
    17f8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17fa:	69 a9       	ldd	r22, Y+49	; 0x31
    17fc:	7a a9       	ldd	r23, Y+50	; 0x32
    17fe:	8b a9       	ldd	r24, Y+51	; 0x33
    1800:	9c a9       	ldd	r25, Y+52	; 0x34
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e8       	ldi	r20, 0x80	; 128
    1808:	5f e3       	ldi	r21, 0x3F	; 63
    180a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    180e:	88 23       	and	r24, r24
    1810:	2c f4       	brge	.+10     	; 0x181c <LCD_sendCommand+0x72>
		__ticks = 1;
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	98 ab       	std	Y+48, r25	; 0x30
    1818:	8f a7       	std	Y+47, r24	; 0x2f
    181a:	3f c0       	rjmp	.+126    	; 0x189a <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    181c:	69 a9       	ldd	r22, Y+49	; 0x31
    181e:	7a a9       	ldd	r23, Y+50	; 0x32
    1820:	8b a9       	ldd	r24, Y+51	; 0x33
    1822:	9c a9       	ldd	r25, Y+52	; 0x34
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	3f ef       	ldi	r19, 0xFF	; 255
    1828:	4f e7       	ldi	r20, 0x7F	; 127
    182a:	57 e4       	ldi	r21, 0x47	; 71
    182c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1830:	18 16       	cp	r1, r24
    1832:	4c f5       	brge	.+82     	; 0x1886 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1834:	6d a9       	ldd	r22, Y+53	; 0x35
    1836:	7e a9       	ldd	r23, Y+54	; 0x36
    1838:	8f a9       	ldd	r24, Y+55	; 0x37
    183a:	98 ad       	ldd	r25, Y+56	; 0x38
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	40 e2       	ldi	r20, 0x20	; 32
    1842:	51 e4       	ldi	r21, 0x41	; 65
    1844:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	bc 01       	movw	r22, r24
    184e:	cd 01       	movw	r24, r26
    1850:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	98 ab       	std	Y+48, r25	; 0x30
    185a:	8f a7       	std	Y+47, r24	; 0x2f
    185c:	0f c0       	rjmp	.+30     	; 0x187c <LCD_sendCommand+0xd2>
    185e:	88 ec       	ldi	r24, 0xC8	; 200
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	9e a7       	std	Y+46, r25	; 0x2e
    1864:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1866:	8d a5       	ldd	r24, Y+45	; 0x2d
    1868:	9e a5       	ldd	r25, Y+46	; 0x2e
    186a:	01 97       	sbiw	r24, 0x01	; 1
    186c:	f1 f7       	brne	.-4      	; 0x186a <LCD_sendCommand+0xc0>
    186e:	9e a7       	std	Y+46, r25	; 0x2e
    1870:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1872:	8f a5       	ldd	r24, Y+47	; 0x2f
    1874:	98 a9       	ldd	r25, Y+48	; 0x30
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	98 ab       	std	Y+48, r25	; 0x30
    187a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    187c:	8f a5       	ldd	r24, Y+47	; 0x2f
    187e:	98 a9       	ldd	r25, Y+48	; 0x30
    1880:	00 97       	sbiw	r24, 0x00	; 0
    1882:	69 f7       	brne	.-38     	; 0x185e <LCD_sendCommand+0xb4>
    1884:	14 c0       	rjmp	.+40     	; 0x18ae <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1886:	69 a9       	ldd	r22, Y+49	; 0x31
    1888:	7a a9       	ldd	r23, Y+50	; 0x32
    188a:	8b a9       	ldd	r24, Y+51	; 0x33
    188c:	9c a9       	ldd	r25, Y+52	; 0x34
    188e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	98 ab       	std	Y+48, r25	; 0x30
    1898:	8f a7       	std	Y+47, r24	; 0x2f
    189a:	8f a5       	ldd	r24, Y+47	; 0x2f
    189c:	98 a9       	ldd	r25, Y+48	; 0x30
    189e:	9c a7       	std	Y+44, r25	; 0x2c
    18a0:	8b a7       	std	Y+43, r24	; 0x2b
    18a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    18a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	f1 f7       	brne	.-4      	; 0x18a6 <LCD_sendCommand+0xfc>
    18aa:	9c a7       	std	Y+44, r25	; 0x2c
    18ac:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	61 e0       	ldi	r22, 0x01	; 1
    18b2:	41 e0       	ldi	r20, 0x01	; 1
    18b4:	0e 94 17 08 	call	0x102e	; 0x102e <GPIO_writePin>
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	a0 e8       	ldi	r26, 0x80	; 128
    18be:	bf e3       	ldi	r27, 0x3F	; 63
    18c0:	8f a3       	std	Y+39, r24	; 0x27
    18c2:	98 a7       	std	Y+40, r25	; 0x28
    18c4:	a9 a7       	std	Y+41, r26	; 0x29
    18c6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c8:	6f a1       	ldd	r22, Y+39	; 0x27
    18ca:	78 a5       	ldd	r23, Y+40	; 0x28
    18cc:	89 a5       	ldd	r24, Y+41	; 0x29
    18ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	4a ef       	ldi	r20, 0xFA	; 250
    18d6:	54 e4       	ldi	r21, 0x44	; 68
    18d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	8b a3       	std	Y+35, r24	; 0x23
    18e2:	9c a3       	std	Y+36, r25	; 0x24
    18e4:	ad a3       	std	Y+37, r26	; 0x25
    18e6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18e8:	6b a1       	ldd	r22, Y+35	; 0x23
    18ea:	7c a1       	ldd	r23, Y+36	; 0x24
    18ec:	8d a1       	ldd	r24, Y+37	; 0x25
    18ee:	9e a1       	ldd	r25, Y+38	; 0x26
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 e8       	ldi	r20, 0x80	; 128
    18f6:	5f e3       	ldi	r21, 0x3F	; 63
    18f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18fc:	88 23       	and	r24, r24
    18fe:	2c f4       	brge	.+10     	; 0x190a <LCD_sendCommand+0x160>
		__ticks = 1;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	9a a3       	std	Y+34, r25	; 0x22
    1906:	89 a3       	std	Y+33, r24	; 0x21
    1908:	3f c0       	rjmp	.+126    	; 0x1988 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    190a:	6b a1       	ldd	r22, Y+35	; 0x23
    190c:	7c a1       	ldd	r23, Y+36	; 0x24
    190e:	8d a1       	ldd	r24, Y+37	; 0x25
    1910:	9e a1       	ldd	r25, Y+38	; 0x26
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	3f ef       	ldi	r19, 0xFF	; 255
    1916:	4f e7       	ldi	r20, 0x7F	; 127
    1918:	57 e4       	ldi	r21, 0x47	; 71
    191a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    191e:	18 16       	cp	r1, r24
    1920:	4c f5       	brge	.+82     	; 0x1974 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1922:	6f a1       	ldd	r22, Y+39	; 0x27
    1924:	78 a5       	ldd	r23, Y+40	; 0x28
    1926:	89 a5       	ldd	r24, Y+41	; 0x29
    1928:	9a a5       	ldd	r25, Y+42	; 0x2a
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	40 e2       	ldi	r20, 0x20	; 32
    1930:	51 e4       	ldi	r21, 0x41	; 65
    1932:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	bc 01       	movw	r22, r24
    193c:	cd 01       	movw	r24, r26
    193e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	9a a3       	std	Y+34, r25	; 0x22
    1948:	89 a3       	std	Y+33, r24	; 0x21
    194a:	0f c0       	rjmp	.+30     	; 0x196a <LCD_sendCommand+0x1c0>
    194c:	88 ec       	ldi	r24, 0xC8	; 200
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	98 a3       	std	Y+32, r25	; 0x20
    1952:	8f 8f       	std	Y+31, r24	; 0x1f
    1954:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1956:	98 a1       	ldd	r25, Y+32	; 0x20
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	f1 f7       	brne	.-4      	; 0x1958 <LCD_sendCommand+0x1ae>
    195c:	98 a3       	std	Y+32, r25	; 0x20
    195e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1960:	89 a1       	ldd	r24, Y+33	; 0x21
    1962:	9a a1       	ldd	r25, Y+34	; 0x22
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	9a a3       	std	Y+34, r25	; 0x22
    1968:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    196a:	89 a1       	ldd	r24, Y+33	; 0x21
    196c:	9a a1       	ldd	r25, Y+34	; 0x22
    196e:	00 97       	sbiw	r24, 0x00	; 0
    1970:	69 f7       	brne	.-38     	; 0x194c <LCD_sendCommand+0x1a2>
    1972:	14 c0       	rjmp	.+40     	; 0x199c <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1974:	6b a1       	ldd	r22, Y+35	; 0x23
    1976:	7c a1       	ldd	r23, Y+36	; 0x24
    1978:	8d a1       	ldd	r24, Y+37	; 0x25
    197a:	9e a1       	ldd	r25, Y+38	; 0x26
    197c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	9a a3       	std	Y+34, r25	; 0x22
    1986:	89 a3       	std	Y+33, r24	; 0x21
    1988:	89 a1       	ldd	r24, Y+33	; 0x21
    198a:	9a a1       	ldd	r25, Y+34	; 0x22
    198c:	9e 8f       	std	Y+30, r25	; 0x1e
    198e:	8d 8f       	std	Y+29, r24	; 0x1d
    1990:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1992:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	f1 f7       	brne	.-4      	; 0x1994 <LCD_sendCommand+0x1ea>
    1998:	9e 8f       	std	Y+30, r25	; 0x1e
    199a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
#if(LCD_BITS_MODE==8)
	GPIO_writePort(LCD_DATA_PORT_ID,command);
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	69 ad       	ldd	r22, Y+57	; 0x39
    19a0:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <GPIO_writePort>
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	a0 e8       	ldi	r26, 0x80	; 128
    19aa:	bf e3       	ldi	r27, 0x3F	; 63
    19ac:	89 8f       	std	Y+25, r24	; 0x19
    19ae:	9a 8f       	std	Y+26, r25	; 0x1a
    19b0:	ab 8f       	std	Y+27, r26	; 0x1b
    19b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b4:	69 8d       	ldd	r22, Y+25	; 0x19
    19b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	4a ef       	ldi	r20, 0xFA	; 250
    19c2:	54 e4       	ldi	r21, 0x44	; 68
    19c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	8d 8b       	std	Y+21, r24	; 0x15
    19ce:	9e 8b       	std	Y+22, r25	; 0x16
    19d0:	af 8b       	std	Y+23, r26	; 0x17
    19d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19d4:	6d 89       	ldd	r22, Y+21	; 0x15
    19d6:	7e 89       	ldd	r23, Y+22	; 0x16
    19d8:	8f 89       	ldd	r24, Y+23	; 0x17
    19da:	98 8d       	ldd	r25, Y+24	; 0x18
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	40 e8       	ldi	r20, 0x80	; 128
    19e2:	5f e3       	ldi	r21, 0x3F	; 63
    19e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19e8:	88 23       	and	r24, r24
    19ea:	2c f4       	brge	.+10     	; 0x19f6 <LCD_sendCommand+0x24c>
		__ticks = 1;
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	9c 8b       	std	Y+20, r25	; 0x14
    19f2:	8b 8b       	std	Y+19, r24	; 0x13
    19f4:	3f c0       	rjmp	.+126    	; 0x1a74 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    19f6:	6d 89       	ldd	r22, Y+21	; 0x15
    19f8:	7e 89       	ldd	r23, Y+22	; 0x16
    19fa:	8f 89       	ldd	r24, Y+23	; 0x17
    19fc:	98 8d       	ldd	r25, Y+24	; 0x18
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	3f ef       	ldi	r19, 0xFF	; 255
    1a02:	4f e7       	ldi	r20, 0x7F	; 127
    1a04:	57 e4       	ldi	r21, 0x47	; 71
    1a06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a0a:	18 16       	cp	r1, r24
    1a0c:	4c f5       	brge	.+82     	; 0x1a60 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a0e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	40 e2       	ldi	r20, 0x20	; 32
    1a1c:	51 e4       	ldi	r21, 0x41	; 65
    1a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	bc 01       	movw	r22, r24
    1a28:	cd 01       	movw	r24, r26
    1a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	9c 8b       	std	Y+20, r25	; 0x14
    1a34:	8b 8b       	std	Y+19, r24	; 0x13
    1a36:	0f c0       	rjmp	.+30     	; 0x1a56 <LCD_sendCommand+0x2ac>
    1a38:	88 ec       	ldi	r24, 0xC8	; 200
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	9a 8b       	std	Y+18, r25	; 0x12
    1a3e:	89 8b       	std	Y+17, r24	; 0x11
    1a40:	89 89       	ldd	r24, Y+17	; 0x11
    1a42:	9a 89       	ldd	r25, Y+18	; 0x12
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	f1 f7       	brne	.-4      	; 0x1a44 <LCD_sendCommand+0x29a>
    1a48:	9a 8b       	std	Y+18, r25	; 0x12
    1a4a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	9c 8b       	std	Y+20, r25	; 0x14
    1a54:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a56:	8b 89       	ldd	r24, Y+19	; 0x13
    1a58:	9c 89       	ldd	r25, Y+20	; 0x14
    1a5a:	00 97       	sbiw	r24, 0x00	; 0
    1a5c:	69 f7       	brne	.-38     	; 0x1a38 <LCD_sendCommand+0x28e>
    1a5e:	14 c0       	rjmp	.+40     	; 0x1a88 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a60:	6d 89       	ldd	r22, Y+21	; 0x15
    1a62:	7e 89       	ldd	r23, Y+22	; 0x16
    1a64:	8f 89       	ldd	r24, Y+23	; 0x17
    1a66:	98 8d       	ldd	r25, Y+24	; 0x18
    1a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	9c 8b       	std	Y+20, r25	; 0x14
    1a72:	8b 8b       	std	Y+19, r24	; 0x13
    1a74:	8b 89       	ldd	r24, Y+19	; 0x13
    1a76:	9c 89       	ldd	r25, Y+20	; 0x14
    1a78:	98 8b       	std	Y+16, r25	; 0x10
    1a7a:	8f 87       	std	Y+15, r24	; 0x0f
    1a7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a7e:	98 89       	ldd	r25, Y+16	; 0x10
    1a80:	01 97       	sbiw	r24, 0x01	; 1
    1a82:	f1 f7       	brne	.-4      	; 0x1a80 <LCD_sendCommand+0x2d6>
    1a84:	98 8b       	std	Y+16, r25	; 0x10
    1a86:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	61 e0       	ldi	r22, 0x01	; 1
    1a8c:	40 e0       	ldi	r20, 0x00	; 0
    1a8e:	0e 94 17 08 	call	0x102e	; 0x102e <GPIO_writePin>
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	a0 e8       	ldi	r26, 0x80	; 128
    1a98:	bf e3       	ldi	r27, 0x3F	; 63
    1a9a:	8b 87       	std	Y+11, r24	; 0x0b
    1a9c:	9c 87       	std	Y+12, r25	; 0x0c
    1a9e:	ad 87       	std	Y+13, r26	; 0x0d
    1aa0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	4a ef       	ldi	r20, 0xFA	; 250
    1ab0:	54 e4       	ldi	r21, 0x44	; 68
    1ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	8f 83       	std	Y+7, r24	; 0x07
    1abc:	98 87       	std	Y+8, r25	; 0x08
    1abe:	a9 87       	std	Y+9, r26	; 0x09
    1ac0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ac2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac4:	78 85       	ldd	r23, Y+8	; 0x08
    1ac6:	89 85       	ldd	r24, Y+9	; 0x09
    1ac8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	40 e8       	ldi	r20, 0x80	; 128
    1ad0:	5f e3       	ldi	r21, 0x3F	; 63
    1ad2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ad6:	88 23       	and	r24, r24
    1ad8:	2c f4       	brge	.+10     	; 0x1ae4 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	9e 83       	std	Y+6, r25	; 0x06
    1ae0:	8d 83       	std	Y+5, r24	; 0x05
    1ae2:	3f c0       	rjmp	.+126    	; 0x1b62 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1ae4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae6:	78 85       	ldd	r23, Y+8	; 0x08
    1ae8:	89 85       	ldd	r24, Y+9	; 0x09
    1aea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	3f ef       	ldi	r19, 0xFF	; 255
    1af0:	4f e7       	ldi	r20, 0x7F	; 127
    1af2:	57 e4       	ldi	r21, 0x47	; 71
    1af4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1af8:	18 16       	cp	r1, r24
    1afa:	4c f5       	brge	.+82     	; 0x1b4e <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1afc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1afe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e2       	ldi	r20, 0x20	; 32
    1b0a:	51 e4       	ldi	r21, 0x41	; 65
    1b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	bc 01       	movw	r22, r24
    1b16:	cd 01       	movw	r24, r26
    1b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	9e 83       	std	Y+6, r25	; 0x06
    1b22:	8d 83       	std	Y+5, r24	; 0x05
    1b24:	0f c0       	rjmp	.+30     	; 0x1b44 <LCD_sendCommand+0x39a>
    1b26:	88 ec       	ldi	r24, 0xC8	; 200
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	9c 83       	std	Y+4, r25	; 0x04
    1b2c:	8b 83       	std	Y+3, r24	; 0x03
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	9c 81       	ldd	r25, Y+4	; 0x04
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <LCD_sendCommand+0x388>
    1b36:	9c 83       	std	Y+4, r25	; 0x04
    1b38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	9e 83       	std	Y+6, r25	; 0x06
    1b42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b44:	8d 81       	ldd	r24, Y+5	; 0x05
    1b46:	9e 81       	ldd	r25, Y+6	; 0x06
    1b48:	00 97       	sbiw	r24, 0x00	; 0
    1b4a:	69 f7       	brne	.-38     	; 0x1b26 <LCD_sendCommand+0x37c>
    1b4c:	14 c0       	rjmp	.+40     	; 0x1b76 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b50:	78 85       	ldd	r23, Y+8	; 0x08
    1b52:	89 85       	ldd	r24, Y+9	; 0x09
    1b54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	9e 83       	std	Y+6, r25	; 0x06
    1b60:	8d 83       	std	Y+5, r24	; 0x05
    1b62:	8d 81       	ldd	r24, Y+5	; 0x05
    1b64:	9e 81       	ldd	r25, Y+6	; 0x06
    1b66:	9a 83       	std	Y+2, r25	; 0x02
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
    1b6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	f1 f7       	brne	.-4      	; 0x1b6e <LCD_sendCommand+0x3c4>
    1b72:	9a 83       	std	Y+2, r25	; 0x02
    1b74:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
	_delay_ms(1);
#endif

}
    1b76:	e9 96       	adiw	r28, 0x39	; 57
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	de bf       	out	0x3e, r29	; 62
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	cd bf       	out	0x3d, r28	; 61
    1b82:	cf 91       	pop	r28
    1b84:	df 91       	pop	r29
    1b86:	08 95       	ret

00001b88 <LCD_displayCharacters>:
void LCD_displayCharacters(char character)
{
    1b88:	df 93       	push	r29
    1b8a:	cf 93       	push	r28
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	e9 97       	sbiw	r28, 0x39	; 57
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	f8 94       	cli
    1b96:	de bf       	out	0x3e, r29	; 62
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	cd bf       	out	0x3d, r28	; 61
    1b9c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	60 e0       	ldi	r22, 0x00	; 0
    1ba2:	41 e0       	ldi	r20, 0x01	; 1
    1ba4:	0e 94 17 08 	call	0x102e	; 0x102e <GPIO_writePin>
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	a0 e8       	ldi	r26, 0x80	; 128
    1bae:	bf e3       	ldi	r27, 0x3F	; 63
    1bb0:	8d ab       	std	Y+53, r24	; 0x35
    1bb2:	9e ab       	std	Y+54, r25	; 0x36
    1bb4:	af ab       	std	Y+55, r26	; 0x37
    1bb6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb8:	6d a9       	ldd	r22, Y+53	; 0x35
    1bba:	7e a9       	ldd	r23, Y+54	; 0x36
    1bbc:	8f a9       	ldd	r24, Y+55	; 0x37
    1bbe:	98 ad       	ldd	r25, Y+56	; 0x38
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	4a ef       	ldi	r20, 0xFA	; 250
    1bc6:	54 e4       	ldi	r21, 0x44	; 68
    1bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	89 ab       	std	Y+49, r24	; 0x31
    1bd2:	9a ab       	std	Y+50, r25	; 0x32
    1bd4:	ab ab       	std	Y+51, r26	; 0x33
    1bd6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bd8:	69 a9       	ldd	r22, Y+49	; 0x31
    1bda:	7a a9       	ldd	r23, Y+50	; 0x32
    1bdc:	8b a9       	ldd	r24, Y+51	; 0x33
    1bde:	9c a9       	ldd	r25, Y+52	; 0x34
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e8       	ldi	r20, 0x80	; 128
    1be6:	5f e3       	ldi	r21, 0x3F	; 63
    1be8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bec:	88 23       	and	r24, r24
    1bee:	2c f4       	brge	.+10     	; 0x1bfa <LCD_displayCharacters+0x72>
		__ticks = 1;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	98 ab       	std	Y+48, r25	; 0x30
    1bf6:	8f a7       	std	Y+47, r24	; 0x2f
    1bf8:	3f c0       	rjmp	.+126    	; 0x1c78 <LCD_displayCharacters+0xf0>
	else if (__tmp > 65535)
    1bfa:	69 a9       	ldd	r22, Y+49	; 0x31
    1bfc:	7a a9       	ldd	r23, Y+50	; 0x32
    1bfe:	8b a9       	ldd	r24, Y+51	; 0x33
    1c00:	9c a9       	ldd	r25, Y+52	; 0x34
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	3f ef       	ldi	r19, 0xFF	; 255
    1c06:	4f e7       	ldi	r20, 0x7F	; 127
    1c08:	57 e4       	ldi	r21, 0x47	; 71
    1c0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c0e:	18 16       	cp	r1, r24
    1c10:	4c f5       	brge	.+82     	; 0x1c64 <LCD_displayCharacters+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c12:	6d a9       	ldd	r22, Y+53	; 0x35
    1c14:	7e a9       	ldd	r23, Y+54	; 0x36
    1c16:	8f a9       	ldd	r24, Y+55	; 0x37
    1c18:	98 ad       	ldd	r25, Y+56	; 0x38
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e2       	ldi	r20, 0x20	; 32
    1c20:	51 e4       	ldi	r21, 0x41	; 65
    1c22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	bc 01       	movw	r22, r24
    1c2c:	cd 01       	movw	r24, r26
    1c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	98 ab       	std	Y+48, r25	; 0x30
    1c38:	8f a7       	std	Y+47, r24	; 0x2f
    1c3a:	0f c0       	rjmp	.+30     	; 0x1c5a <LCD_displayCharacters+0xd2>
    1c3c:	88 ec       	ldi	r24, 0xC8	; 200
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	9e a7       	std	Y+46, r25	; 0x2e
    1c42:	8d a7       	std	Y+45, r24	; 0x2d
    1c44:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c46:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	f1 f7       	brne	.-4      	; 0x1c48 <LCD_displayCharacters+0xc0>
    1c4c:	9e a7       	std	Y+46, r25	; 0x2e
    1c4e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c52:	98 a9       	ldd	r25, Y+48	; 0x30
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	98 ab       	std	Y+48, r25	; 0x30
    1c58:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c5c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	69 f7       	brne	.-38     	; 0x1c3c <LCD_displayCharacters+0xb4>
    1c62:	14 c0       	rjmp	.+40     	; 0x1c8c <LCD_displayCharacters+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c64:	69 a9       	ldd	r22, Y+49	; 0x31
    1c66:	7a a9       	ldd	r23, Y+50	; 0x32
    1c68:	8b a9       	ldd	r24, Y+51	; 0x33
    1c6a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	98 ab       	std	Y+48, r25	; 0x30
    1c76:	8f a7       	std	Y+47, r24	; 0x2f
    1c78:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c7a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c7c:	9c a7       	std	Y+44, r25	; 0x2c
    1c7e:	8b a7       	std	Y+43, r24	; 0x2b
    1c80:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c82:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	f1 f7       	brne	.-4      	; 0x1c84 <LCD_displayCharacters+0xfc>
    1c88:	9c a7       	std	Y+44, r25	; 0x2c
    1c8a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	61 e0       	ldi	r22, 0x01	; 1
    1c90:	41 e0       	ldi	r20, 0x01	; 1
    1c92:	0e 94 17 08 	call	0x102e	; 0x102e <GPIO_writePin>
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	a0 e8       	ldi	r26, 0x80	; 128
    1c9c:	bf e3       	ldi	r27, 0x3F	; 63
    1c9e:	8f a3       	std	Y+39, r24	; 0x27
    1ca0:	98 a7       	std	Y+40, r25	; 0x28
    1ca2:	a9 a7       	std	Y+41, r26	; 0x29
    1ca4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ca8:	78 a5       	ldd	r23, Y+40	; 0x28
    1caa:	89 a5       	ldd	r24, Y+41	; 0x29
    1cac:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	4a ef       	ldi	r20, 0xFA	; 250
    1cb4:	54 e4       	ldi	r21, 0x44	; 68
    1cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	8b a3       	std	Y+35, r24	; 0x23
    1cc0:	9c a3       	std	Y+36, r25	; 0x24
    1cc2:	ad a3       	std	Y+37, r26	; 0x25
    1cc4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cc6:	6b a1       	ldd	r22, Y+35	; 0x23
    1cc8:	7c a1       	ldd	r23, Y+36	; 0x24
    1cca:	8d a1       	ldd	r24, Y+37	; 0x25
    1ccc:	9e a1       	ldd	r25, Y+38	; 0x26
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e8       	ldi	r20, 0x80	; 128
    1cd4:	5f e3       	ldi	r21, 0x3F	; 63
    1cd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cda:	88 23       	and	r24, r24
    1cdc:	2c f4       	brge	.+10     	; 0x1ce8 <LCD_displayCharacters+0x160>
		__ticks = 1;
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	9a a3       	std	Y+34, r25	; 0x22
    1ce4:	89 a3       	std	Y+33, r24	; 0x21
    1ce6:	3f c0       	rjmp	.+126    	; 0x1d66 <LCD_displayCharacters+0x1de>
	else if (__tmp > 65535)
    1ce8:	6b a1       	ldd	r22, Y+35	; 0x23
    1cea:	7c a1       	ldd	r23, Y+36	; 0x24
    1cec:	8d a1       	ldd	r24, Y+37	; 0x25
    1cee:	9e a1       	ldd	r25, Y+38	; 0x26
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	3f ef       	ldi	r19, 0xFF	; 255
    1cf4:	4f e7       	ldi	r20, 0x7F	; 127
    1cf6:	57 e4       	ldi	r21, 0x47	; 71
    1cf8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cfc:	18 16       	cp	r1, r24
    1cfe:	4c f5       	brge	.+82     	; 0x1d52 <LCD_displayCharacters+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d00:	6f a1       	ldd	r22, Y+39	; 0x27
    1d02:	78 a5       	ldd	r23, Y+40	; 0x28
    1d04:	89 a5       	ldd	r24, Y+41	; 0x29
    1d06:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e2       	ldi	r20, 0x20	; 32
    1d0e:	51 e4       	ldi	r21, 0x41	; 65
    1d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	bc 01       	movw	r22, r24
    1d1a:	cd 01       	movw	r24, r26
    1d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	9a a3       	std	Y+34, r25	; 0x22
    1d26:	89 a3       	std	Y+33, r24	; 0x21
    1d28:	0f c0       	rjmp	.+30     	; 0x1d48 <LCD_displayCharacters+0x1c0>
    1d2a:	88 ec       	ldi	r24, 0xC8	; 200
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	98 a3       	std	Y+32, r25	; 0x20
    1d30:	8f 8f       	std	Y+31, r24	; 0x1f
    1d32:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d34:	98 a1       	ldd	r25, Y+32	; 0x20
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	f1 f7       	brne	.-4      	; 0x1d36 <LCD_displayCharacters+0x1ae>
    1d3a:	98 a3       	std	Y+32, r25	; 0x20
    1d3c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d40:	9a a1       	ldd	r25, Y+34	; 0x22
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	9a a3       	std	Y+34, r25	; 0x22
    1d46:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d48:	89 a1       	ldd	r24, Y+33	; 0x21
    1d4a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	69 f7       	brne	.-38     	; 0x1d2a <LCD_displayCharacters+0x1a2>
    1d50:	14 c0       	rjmp	.+40     	; 0x1d7a <LCD_displayCharacters+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d52:	6b a1       	ldd	r22, Y+35	; 0x23
    1d54:	7c a1       	ldd	r23, Y+36	; 0x24
    1d56:	8d a1       	ldd	r24, Y+37	; 0x25
    1d58:	9e a1       	ldd	r25, Y+38	; 0x26
    1d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	9a a3       	std	Y+34, r25	; 0x22
    1d64:	89 a3       	std	Y+33, r24	; 0x21
    1d66:	89 a1       	ldd	r24, Y+33	; 0x21
    1d68:	9a a1       	ldd	r25, Y+34	; 0x22
    1d6a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d6c:	8d 8f       	std	Y+29, r24	; 0x1d
    1d6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d70:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	f1 f7       	brne	.-4      	; 0x1d72 <LCD_displayCharacters+0x1ea>
    1d76:	9e 8f       	std	Y+30, r25	; 0x1e
    1d78:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
#if(LCD_BITS_MODE==8)
	GPIO_writePort(LCD_DATA_PORT_ID,character);
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	69 ad       	ldd	r22, Y+57	; 0x39
    1d7e:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <GPIO_writePort>
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	a0 e8       	ldi	r26, 0x80	; 128
    1d88:	bf e3       	ldi	r27, 0x3F	; 63
    1d8a:	89 8f       	std	Y+25, r24	; 0x19
    1d8c:	9a 8f       	std	Y+26, r25	; 0x1a
    1d8e:	ab 8f       	std	Y+27, r26	; 0x1b
    1d90:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d92:	69 8d       	ldd	r22, Y+25	; 0x19
    1d94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	4a ef       	ldi	r20, 0xFA	; 250
    1da0:	54 e4       	ldi	r21, 0x44	; 68
    1da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	8d 8b       	std	Y+21, r24	; 0x15
    1dac:	9e 8b       	std	Y+22, r25	; 0x16
    1dae:	af 8b       	std	Y+23, r26	; 0x17
    1db0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1db2:	6d 89       	ldd	r22, Y+21	; 0x15
    1db4:	7e 89       	ldd	r23, Y+22	; 0x16
    1db6:	8f 89       	ldd	r24, Y+23	; 0x17
    1db8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 e8       	ldi	r20, 0x80	; 128
    1dc0:	5f e3       	ldi	r21, 0x3F	; 63
    1dc2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dc6:	88 23       	and	r24, r24
    1dc8:	2c f4       	brge	.+10     	; 0x1dd4 <LCD_displayCharacters+0x24c>
		__ticks = 1;
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	9c 8b       	std	Y+20, r25	; 0x14
    1dd0:	8b 8b       	std	Y+19, r24	; 0x13
    1dd2:	3f c0       	rjmp	.+126    	; 0x1e52 <LCD_displayCharacters+0x2ca>
	else if (__tmp > 65535)
    1dd4:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd6:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dda:	98 8d       	ldd	r25, Y+24	; 0x18
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	3f ef       	ldi	r19, 0xFF	; 255
    1de0:	4f e7       	ldi	r20, 0x7F	; 127
    1de2:	57 e4       	ldi	r21, 0x47	; 71
    1de4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1de8:	18 16       	cp	r1, r24
    1dea:	4c f5       	brge	.+82     	; 0x1e3e <LCD_displayCharacters+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dec:	69 8d       	ldd	r22, Y+25	; 0x19
    1dee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1df0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1df2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e2       	ldi	r20, 0x20	; 32
    1dfa:	51 e4       	ldi	r21, 0x41	; 65
    1dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	bc 01       	movw	r22, r24
    1e06:	cd 01       	movw	r24, r26
    1e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	9c 8b       	std	Y+20, r25	; 0x14
    1e12:	8b 8b       	std	Y+19, r24	; 0x13
    1e14:	0f c0       	rjmp	.+30     	; 0x1e34 <LCD_displayCharacters+0x2ac>
    1e16:	88 ec       	ldi	r24, 0xC8	; 200
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	9a 8b       	std	Y+18, r25	; 0x12
    1e1c:	89 8b       	std	Y+17, r24	; 0x11
    1e1e:	89 89       	ldd	r24, Y+17	; 0x11
    1e20:	9a 89       	ldd	r25, Y+18	; 0x12
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	f1 f7       	brne	.-4      	; 0x1e22 <LCD_displayCharacters+0x29a>
    1e26:	9a 8b       	std	Y+18, r25	; 0x12
    1e28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	9c 8b       	std	Y+20, r25	; 0x14
    1e32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e34:	8b 89       	ldd	r24, Y+19	; 0x13
    1e36:	9c 89       	ldd	r25, Y+20	; 0x14
    1e38:	00 97       	sbiw	r24, 0x00	; 0
    1e3a:	69 f7       	brne	.-38     	; 0x1e16 <LCD_displayCharacters+0x28e>
    1e3c:	14 c0       	rjmp	.+40     	; 0x1e66 <LCD_displayCharacters+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e40:	7e 89       	ldd	r23, Y+22	; 0x16
    1e42:	8f 89       	ldd	r24, Y+23	; 0x17
    1e44:	98 8d       	ldd	r25, Y+24	; 0x18
    1e46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	9c 8b       	std	Y+20, r25	; 0x14
    1e50:	8b 8b       	std	Y+19, r24	; 0x13
    1e52:	8b 89       	ldd	r24, Y+19	; 0x13
    1e54:	9c 89       	ldd	r25, Y+20	; 0x14
    1e56:	98 8b       	std	Y+16, r25	; 0x10
    1e58:	8f 87       	std	Y+15, r24	; 0x0f
    1e5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e5c:	98 89       	ldd	r25, Y+16	; 0x10
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	f1 f7       	brne	.-4      	; 0x1e5e <LCD_displayCharacters+0x2d6>
    1e62:	98 8b       	std	Y+16, r25	; 0x10
    1e64:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	61 e0       	ldi	r22, 0x01	; 1
    1e6a:	40 e0       	ldi	r20, 0x00	; 0
    1e6c:	0e 94 17 08 	call	0x102e	; 0x102e <GPIO_writePin>
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	a0 e8       	ldi	r26, 0x80	; 128
    1e76:	bf e3       	ldi	r27, 0x3F	; 63
    1e78:	8b 87       	std	Y+11, r24	; 0x0b
    1e7a:	9c 87       	std	Y+12, r25	; 0x0c
    1e7c:	ad 87       	std	Y+13, r26	; 0x0d
    1e7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	4a ef       	ldi	r20, 0xFA	; 250
    1e8e:	54 e4       	ldi	r21, 0x44	; 68
    1e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	8f 83       	std	Y+7, r24	; 0x07
    1e9a:	98 87       	std	Y+8, r25	; 0x08
    1e9c:	a9 87       	std	Y+9, r26	; 0x09
    1e9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ea0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea2:	78 85       	ldd	r23, Y+8	; 0x08
    1ea4:	89 85       	ldd	r24, Y+9	; 0x09
    1ea6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	40 e8       	ldi	r20, 0x80	; 128
    1eae:	5f e3       	ldi	r21, 0x3F	; 63
    1eb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eb4:	88 23       	and	r24, r24
    1eb6:	2c f4       	brge	.+10     	; 0x1ec2 <LCD_displayCharacters+0x33a>
		__ticks = 1;
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	9e 83       	std	Y+6, r25	; 0x06
    1ebe:	8d 83       	std	Y+5, r24	; 0x05
    1ec0:	3f c0       	rjmp	.+126    	; 0x1f40 <LCD_displayCharacters+0x3b8>
	else if (__tmp > 65535)
    1ec2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec4:	78 85       	ldd	r23, Y+8	; 0x08
    1ec6:	89 85       	ldd	r24, Y+9	; 0x09
    1ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	3f ef       	ldi	r19, 0xFF	; 255
    1ece:	4f e7       	ldi	r20, 0x7F	; 127
    1ed0:	57 e4       	ldi	r21, 0x47	; 71
    1ed2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ed6:	18 16       	cp	r1, r24
    1ed8:	4c f5       	brge	.+82     	; 0x1f2c <LCD_displayCharacters+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eda:	6b 85       	ldd	r22, Y+11	; 0x0b
    1edc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ede:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ee0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	40 e2       	ldi	r20, 0x20	; 32
    1ee8:	51 e4       	ldi	r21, 0x41	; 65
    1eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	bc 01       	movw	r22, r24
    1ef4:	cd 01       	movw	r24, r26
    1ef6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	9e 83       	std	Y+6, r25	; 0x06
    1f00:	8d 83       	std	Y+5, r24	; 0x05
    1f02:	0f c0       	rjmp	.+30     	; 0x1f22 <LCD_displayCharacters+0x39a>
    1f04:	88 ec       	ldi	r24, 0xC8	; 200
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	9c 83       	std	Y+4, r25	; 0x04
    1f0a:	8b 83       	std	Y+3, r24	; 0x03
    1f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	f1 f7       	brne	.-4      	; 0x1f10 <LCD_displayCharacters+0x388>
    1f14:	9c 83       	std	Y+4, r25	; 0x04
    1f16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f18:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	9e 83       	std	Y+6, r25	; 0x06
    1f20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f22:	8d 81       	ldd	r24, Y+5	; 0x05
    1f24:	9e 81       	ldd	r25, Y+6	; 0x06
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	69 f7       	brne	.-38     	; 0x1f04 <LCD_displayCharacters+0x37c>
    1f2a:	14 c0       	rjmp	.+40     	; 0x1f54 <LCD_displayCharacters+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f2e:	78 85       	ldd	r23, Y+8	; 0x08
    1f30:	89 85       	ldd	r24, Y+9	; 0x09
    1f32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	9e 83       	std	Y+6, r25	; 0x06
    1f3e:	8d 83       	std	Y+5, r24	; 0x05
    1f40:	8d 81       	ldd	r24, Y+5	; 0x05
    1f42:	9e 81       	ldd	r25, Y+6	; 0x06
    1f44:	9a 83       	std	Y+2, r25	; 0x02
    1f46:	89 83       	std	Y+1, r24	; 0x01
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	f1 f7       	brne	.-4      	; 0x1f4c <LCD_displayCharacters+0x3c4>
    1f50:	9a 83       	std	Y+2, r25	; 0x02
    1f52:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
	_delay_ms(1);
#endif
}
    1f54:	e9 96       	adiw	r28, 0x39	; 57
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	cd bf       	out	0x3d, r28	; 61
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	08 95       	ret

00001f66 <LCD_displayString>:
void LCD_displayString(const char *s)
{
    1f66:	df 93       	push	r29
    1f68:	cf 93       	push	r28
    1f6a:	00 d0       	rcall	.+0      	; 0x1f6c <LCD_displayString+0x6>
    1f6c:	0f 92       	push	r0
    1f6e:	cd b7       	in	r28, 0x3d	; 61
    1f70:	de b7       	in	r29, 0x3e	; 62
    1f72:	9b 83       	std	Y+3, r25	; 0x03
    1f74:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    1f76:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;*(s+i)!='\0';i++)
    1f78:	19 82       	std	Y+1, r1	; 0x01
    1f7a:	0e c0       	rjmp	.+28     	; 0x1f98 <LCD_displayString+0x32>
	{
		LCD_displayCharacters(*(s+i));
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	28 2f       	mov	r18, r24
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	9b 81       	ldd	r25, Y+3	; 0x03
    1f86:	fc 01       	movw	r30, r24
    1f88:	e2 0f       	add	r30, r18
    1f8a:	f3 1f       	adc	r31, r19
    1f8c:	80 81       	ld	r24, Z
    1f8e:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <LCD_displayCharacters>
#endif
}
void LCD_displayString(const char *s)
{
	uint8 i=0;
	for(i=0;*(s+i)!='\0';i++)
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	8f 5f       	subi	r24, 0xFF	; 255
    1f96:	89 83       	std	Y+1, r24	; 0x01
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	28 2f       	mov	r18, r24
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	e2 0f       	add	r30, r18
    1fa6:	f3 1f       	adc	r31, r19
    1fa8:	80 81       	ld	r24, Z
    1faa:	88 23       	and	r24, r24
    1fac:	39 f7       	brne	.-50     	; 0x1f7c <LCD_displayString+0x16>
	{
		LCD_displayCharacters(*(s+i));
	}
}
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	08 95       	ret

00001fba <LCD_moveCursor>:
void LCD_moveCursor(uint8 row,uint8 col)
{
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	00 d0       	rcall	.+0      	; 0x1fc0 <LCD_moveCursor+0x6>
    1fc0:	00 d0       	rcall	.+0      	; 0x1fc2 <LCD_moveCursor+0x8>
    1fc2:	0f 92       	push	r0
    1fc4:	cd b7       	in	r28, 0x3d	; 61
    1fc6:	de b7       	in	r29, 0x3e	; 62
    1fc8:	8a 83       	std	Y+2, r24	; 0x02
    1fca:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	switch(row)
    1fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fce:	28 2f       	mov	r18, r24
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	3d 83       	std	Y+5, r19	; 0x05
    1fd4:	2c 83       	std	Y+4, r18	; 0x04
    1fd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1fda:	81 30       	cpi	r24, 0x01	; 1
    1fdc:	91 05       	cpc	r25, r1
    1fde:	c1 f0       	breq	.+48     	; 0x2010 <LCD_moveCursor+0x56>
    1fe0:	2c 81       	ldd	r18, Y+4	; 0x04
    1fe2:	3d 81       	ldd	r19, Y+5	; 0x05
    1fe4:	22 30       	cpi	r18, 0x02	; 2
    1fe6:	31 05       	cpc	r19, r1
    1fe8:	2c f4       	brge	.+10     	; 0x1ff4 <LCD_moveCursor+0x3a>
    1fea:	8c 81       	ldd	r24, Y+4	; 0x04
    1fec:	9d 81       	ldd	r25, Y+5	; 0x05
    1fee:	00 97       	sbiw	r24, 0x00	; 0
    1ff0:	61 f0       	breq	.+24     	; 0x200a <LCD_moveCursor+0x50>
    1ff2:	19 c0       	rjmp	.+50     	; 0x2026 <LCD_moveCursor+0x6c>
    1ff4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ff6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ff8:	22 30       	cpi	r18, 0x02	; 2
    1ffa:	31 05       	cpc	r19, r1
    1ffc:	69 f0       	breq	.+26     	; 0x2018 <LCD_moveCursor+0x5e>
    1ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    2000:	9d 81       	ldd	r25, Y+5	; 0x05
    2002:	83 30       	cpi	r24, 0x03	; 3
    2004:	91 05       	cpc	r25, r1
    2006:	61 f0       	breq	.+24     	; 0x2020 <LCD_moveCursor+0x66>
    2008:	0e c0       	rjmp	.+28     	; 0x2026 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    200a:	8b 81       	ldd	r24, Y+3	; 0x03
    200c:	89 83       	std	Y+1, r24	; 0x01
    200e:	0b c0       	rjmp	.+22     	; 0x2026 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    2010:	8b 81       	ldd	r24, Y+3	; 0x03
    2012:	80 5c       	subi	r24, 0xC0	; 192
    2014:	89 83       	std	Y+1, r24	; 0x01
    2016:	07 c0       	rjmp	.+14     	; 0x2026 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col+0x10;
    2018:	8b 81       	ldd	r24, Y+3	; 0x03
    201a:	80 5f       	subi	r24, 0xF0	; 240
    201c:	89 83       	std	Y+1, r24	; 0x01
    201e:	03 c0       	rjmp	.+6      	; 0x2026 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	80 5b       	subi	r24, 0xB0	; 176
    2024:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION); // 3shan LCD
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	80 68       	ori	r24, 0x80	; 128
    202a:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <LCD_sendCommand>
}
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	08 95       	ret

0000203e <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *str)
{
    203e:	df 93       	push	r29
    2040:	cf 93       	push	r28
    2042:	00 d0       	rcall	.+0      	; 0x2044 <LCD_displayStringRowColumn+0x6>
    2044:	00 d0       	rcall	.+0      	; 0x2046 <LCD_displayStringRowColumn+0x8>
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
    204a:	89 83       	std	Y+1, r24	; 0x01
    204c:	6a 83       	std	Y+2, r22	; 0x02
    204e:	5c 83       	std	Y+4, r21	; 0x04
    2050:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col);
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	6a 81       	ldd	r22, Y+2	; 0x02
    2056:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_moveCursor>
	LCD_displayString(str);
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	9c 81       	ldd	r25, Y+4	; 0x04
    205e:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <LCD_displayString>

}
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	cf 91       	pop	r28
    206c:	df 91       	pop	r29
    206e:	08 95       	ret

00002070 <LCD_clearScrean>:
void LCD_clearScrean(void)
{
    2070:	df 93       	push	r29
    2072:	cf 93       	push	r28
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <LCD_sendCommand>
}
    207e:	cf 91       	pop	r28
    2080:	df 91       	pop	r29
    2082:	08 95       	ret

00002084 <LCD_integrToString>:
void LCD_integrToString(uint32 data)
{
    2084:	df 93       	push	r29
    2086:	cf 93       	push	r28
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	64 97       	sbiw	r28, 0x14	; 20
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	f8 94       	cli
    2092:	de bf       	out	0x3e, r29	; 62
    2094:	0f be       	out	0x3f, r0	; 63
    2096:	cd bf       	out	0x3d, r28	; 61
    2098:	69 8b       	std	Y+17, r22	; 0x11
    209a:	7a 8b       	std	Y+18, r23	; 0x12
    209c:	8b 8b       	std	Y+19, r24	; 0x13
    209e:	9c 8b       	std	Y+20, r25	; 0x14
	char buff[16];
	itoa(data,buff,NUM_TYPE);
    20a0:	89 89       	ldd	r24, Y+17	; 0x11
    20a2:	9a 89       	ldd	r25, Y+18	; 0x12
    20a4:	9e 01       	movw	r18, r28
    20a6:	2f 5f       	subi	r18, 0xFF	; 255
    20a8:	3f 4f       	sbci	r19, 0xFF	; 255
    20aa:	b9 01       	movw	r22, r18
    20ac:	4a e0       	ldi	r20, 0x0A	; 10
    20ae:	50 e0       	ldi	r21, 0x00	; 0
    20b0:	0e 94 65 11 	call	0x22ca	; 0x22ca <itoa>
	LCD_displayString(buff);
    20b4:	ce 01       	movw	r24, r28
    20b6:	01 96       	adiw	r24, 0x01	; 1
    20b8:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <LCD_displayString>
}
    20bc:	64 96       	adiw	r28, 0x14	; 20
    20be:	0f b6       	in	r0, 0x3f	; 63
    20c0:	f8 94       	cli
    20c2:	de bf       	out	0x3e, r29	; 62
    20c4:	0f be       	out	0x3f, r0	; 63
    20c6:	cd bf       	out	0x3d, r28	; 61
    20c8:	cf 91       	pop	r28
    20ca:	df 91       	pop	r29
    20cc:	08 95       	ret

000020ce <main>:
#include"../HAL/ULTRASONIC/ultrasonic.h"

#include<avr/delay.h>

int main()
{
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	cd b7       	in	r28, 0x3d	; 61
    20d4:	de b7       	in	r29, 0x3e	; 62
    20d6:	60 97       	sbiw	r28, 0x10	; 16
    20d8:	0f b6       	in	r0, 0x3f	; 63
    20da:	f8 94       	cli
    20dc:	de bf       	out	0x3e, r29	; 62
    20de:	0f be       	out	0x3f, r0	; 63
    20e0:	cd bf       	out	0x3d, r28	; 61
	uint16 distance=0;
    20e2:	18 8a       	std	Y+16, r1	; 0x10
    20e4:	1f 86       	std	Y+15, r1	; 0x0f

	LCD_init();
    20e6:	0e 94 b7 0b 	call	0x176e	; 0x176e <LCD_init>
	LCD_displayStringRowColumn(0,5,"Welcome");
    20ea:	20 e6       	ldi	r18, 0x60	; 96
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	65 e0       	ldi	r22, 0x05	; 5
    20f2:	a9 01       	movw	r20, r18
    20f4:	0e 94 1f 10 	call	0x203e	; 0x203e <LCD_displayStringRowColumn>
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	aa e7       	ldi	r26, 0x7A	; 122
    20fe:	b4 e4       	ldi	r27, 0x44	; 68
    2100:	8b 87       	std	Y+11, r24	; 0x0b
    2102:	9c 87       	std	Y+12, r25	; 0x0c
    2104:	ad 87       	std	Y+13, r26	; 0x0d
    2106:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2108:	6b 85       	ldd	r22, Y+11	; 0x0b
    210a:	7c 85       	ldd	r23, Y+12	; 0x0c
    210c:	8d 85       	ldd	r24, Y+13	; 0x0d
    210e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	4a ef       	ldi	r20, 0xFA	; 250
    2116:	54 e4       	ldi	r21, 0x44	; 68
    2118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	8f 83       	std	Y+7, r24	; 0x07
    2122:	98 87       	std	Y+8, r25	; 0x08
    2124:	a9 87       	std	Y+9, r26	; 0x09
    2126:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2128:	6f 81       	ldd	r22, Y+7	; 0x07
    212a:	78 85       	ldd	r23, Y+8	; 0x08
    212c:	89 85       	ldd	r24, Y+9	; 0x09
    212e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e8       	ldi	r20, 0x80	; 128
    2136:	5f e3       	ldi	r21, 0x3F	; 63
    2138:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    213c:	88 23       	and	r24, r24
    213e:	2c f4       	brge	.+10     	; 0x214a <main+0x7c>
		__ticks = 1;
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	9e 83       	std	Y+6, r25	; 0x06
    2146:	8d 83       	std	Y+5, r24	; 0x05
    2148:	3f c0       	rjmp	.+126    	; 0x21c8 <main+0xfa>
	else if (__tmp > 65535)
    214a:	6f 81       	ldd	r22, Y+7	; 0x07
    214c:	78 85       	ldd	r23, Y+8	; 0x08
    214e:	89 85       	ldd	r24, Y+9	; 0x09
    2150:	9a 85       	ldd	r25, Y+10	; 0x0a
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	3f ef       	ldi	r19, 0xFF	; 255
    2156:	4f e7       	ldi	r20, 0x7F	; 127
    2158:	57 e4       	ldi	r21, 0x47	; 71
    215a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    215e:	18 16       	cp	r1, r24
    2160:	4c f5       	brge	.+82     	; 0x21b4 <main+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2162:	6b 85       	ldd	r22, Y+11	; 0x0b
    2164:	7c 85       	ldd	r23, Y+12	; 0x0c
    2166:	8d 85       	ldd	r24, Y+13	; 0x0d
    2168:	9e 85       	ldd	r25, Y+14	; 0x0e
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e2       	ldi	r20, 0x20	; 32
    2170:	51 e4       	ldi	r21, 0x41	; 65
    2172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	bc 01       	movw	r22, r24
    217c:	cd 01       	movw	r24, r26
    217e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	9e 83       	std	Y+6, r25	; 0x06
    2188:	8d 83       	std	Y+5, r24	; 0x05
    218a:	0f c0       	rjmp	.+30     	; 0x21aa <main+0xdc>
    218c:	88 ec       	ldi	r24, 0xC8	; 200
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	9c 83       	std	Y+4, r25	; 0x04
    2192:	8b 83       	std	Y+3, r24	; 0x03
    2194:	8b 81       	ldd	r24, Y+3	; 0x03
    2196:	9c 81       	ldd	r25, Y+4	; 0x04
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	f1 f7       	brne	.-4      	; 0x2198 <main+0xca>
    219c:	9c 83       	std	Y+4, r25	; 0x04
    219e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a0:	8d 81       	ldd	r24, Y+5	; 0x05
    21a2:	9e 81       	ldd	r25, Y+6	; 0x06
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	9e 83       	std	Y+6, r25	; 0x06
    21a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21aa:	8d 81       	ldd	r24, Y+5	; 0x05
    21ac:	9e 81       	ldd	r25, Y+6	; 0x06
    21ae:	00 97       	sbiw	r24, 0x00	; 0
    21b0:	69 f7       	brne	.-38     	; 0x218c <main+0xbe>
    21b2:	14 c0       	rjmp	.+40     	; 0x21dc <main+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b4:	6f 81       	ldd	r22, Y+7	; 0x07
    21b6:	78 85       	ldd	r23, Y+8	; 0x08
    21b8:	89 85       	ldd	r24, Y+9	; 0x09
    21ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    21bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	9e 83       	std	Y+6, r25	; 0x06
    21c6:	8d 83       	std	Y+5, r24	; 0x05
    21c8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ca:	9e 81       	ldd	r25, Y+6	; 0x06
    21cc:	9a 83       	std	Y+2, r25	; 0x02
    21ce:	89 83       	std	Y+1, r24	; 0x01
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	9a 81       	ldd	r25, Y+2	; 0x02
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	f1 f7       	brne	.-4      	; 0x21d4 <main+0x106>
    21d8:	9a 83       	std	Y+2, r25	; 0x02
    21da:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_clearScrean();
    21dc:	0e 94 38 10 	call	0x2070	; 0x2070 <LCD_clearScrean>
	LCD_displayString("Distance=    cm");//11
    21e0:	88 e6       	ldi	r24, 0x68	; 104
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <LCD_displayString>

	ULTRASONIC_init();
    21e8:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <ULTRASONIC_init>

	while(1)
	{
		distance=ULTRASONIC_readDistance();
    21ec:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <ULTRASONIC_readDistance>
    21f0:	98 8b       	std	Y+16, r25	; 0x10
    21f2:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_moveCursor(0,10);
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	6a e0       	ldi	r22, 0x0A	; 10
    21f8:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_moveCursor>
		if(distance<100)
    21fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    21fe:	98 89       	ldd	r25, Y+16	; 0x10
    2200:	84 36       	cpi	r24, 0x64	; 100
    2202:	91 05       	cpc	r25, r1
    2204:	50 f4       	brcc	.+20     	; 0x221a <main+0x14c>
		{
			LCD_integrToString(distance);
    2206:	8f 85       	ldd	r24, Y+15	; 0x0f
    2208:	98 89       	ldd	r25, Y+16	; 0x10
    220a:	cc 01       	movw	r24, r24
    220c:	a0 e0       	ldi	r26, 0x00	; 0
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	bc 01       	movw	r22, r24
    2212:	cd 01       	movw	r24, r26
    2214:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_integrToString>
    2218:	e9 cf       	rjmp	.-46     	; 0x21ec <main+0x11e>
		}
		else
		{
			LCD_integrToString(distance);
    221a:	8f 85       	ldd	r24, Y+15	; 0x0f
    221c:	98 89       	ldd	r25, Y+16	; 0x10
    221e:	cc 01       	movw	r24, r24
    2220:	a0 e0       	ldi	r26, 0x00	; 0
    2222:	b0 e0       	ldi	r27, 0x00	; 0
    2224:	bc 01       	movw	r22, r24
    2226:	cd 01       	movw	r24, r26
    2228:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_integrToString>
			LCD_displayCharacters(' ');
    222c:	80 e2       	ldi	r24, 0x20	; 32
    222e:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <LCD_displayCharacters>
    2232:	dc cf       	rjmp	.-72     	; 0x21ec <main+0x11e>

00002234 <__udivmodhi4>:
    2234:	aa 1b       	sub	r26, r26
    2236:	bb 1b       	sub	r27, r27
    2238:	51 e1       	ldi	r21, 0x11	; 17
    223a:	07 c0       	rjmp	.+14     	; 0x224a <__udivmodhi4_ep>

0000223c <__udivmodhi4_loop>:
    223c:	aa 1f       	adc	r26, r26
    223e:	bb 1f       	adc	r27, r27
    2240:	a6 17       	cp	r26, r22
    2242:	b7 07       	cpc	r27, r23
    2244:	10 f0       	brcs	.+4      	; 0x224a <__udivmodhi4_ep>
    2246:	a6 1b       	sub	r26, r22
    2248:	b7 0b       	sbc	r27, r23

0000224a <__udivmodhi4_ep>:
    224a:	88 1f       	adc	r24, r24
    224c:	99 1f       	adc	r25, r25
    224e:	5a 95       	dec	r21
    2250:	a9 f7       	brne	.-22     	; 0x223c <__udivmodhi4_loop>
    2252:	80 95       	com	r24
    2254:	90 95       	com	r25
    2256:	bc 01       	movw	r22, r24
    2258:	cd 01       	movw	r24, r26
    225a:	08 95       	ret

0000225c <__prologue_saves__>:
    225c:	2f 92       	push	r2
    225e:	3f 92       	push	r3
    2260:	4f 92       	push	r4
    2262:	5f 92       	push	r5
    2264:	6f 92       	push	r6
    2266:	7f 92       	push	r7
    2268:	8f 92       	push	r8
    226a:	9f 92       	push	r9
    226c:	af 92       	push	r10
    226e:	bf 92       	push	r11
    2270:	cf 92       	push	r12
    2272:	df 92       	push	r13
    2274:	ef 92       	push	r14
    2276:	ff 92       	push	r15
    2278:	0f 93       	push	r16
    227a:	1f 93       	push	r17
    227c:	cf 93       	push	r28
    227e:	df 93       	push	r29
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
    2284:	ca 1b       	sub	r28, r26
    2286:	db 0b       	sbc	r29, r27
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	de bf       	out	0x3e, r29	; 62
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	cd bf       	out	0x3d, r28	; 61
    2292:	09 94       	ijmp

00002294 <__epilogue_restores__>:
    2294:	2a 88       	ldd	r2, Y+18	; 0x12
    2296:	39 88       	ldd	r3, Y+17	; 0x11
    2298:	48 88       	ldd	r4, Y+16	; 0x10
    229a:	5f 84       	ldd	r5, Y+15	; 0x0f
    229c:	6e 84       	ldd	r6, Y+14	; 0x0e
    229e:	7d 84       	ldd	r7, Y+13	; 0x0d
    22a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    22a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    22a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    22a6:	b9 84       	ldd	r11, Y+9	; 0x09
    22a8:	c8 84       	ldd	r12, Y+8	; 0x08
    22aa:	df 80       	ldd	r13, Y+7	; 0x07
    22ac:	ee 80       	ldd	r14, Y+6	; 0x06
    22ae:	fd 80       	ldd	r15, Y+5	; 0x05
    22b0:	0c 81       	ldd	r16, Y+4	; 0x04
    22b2:	1b 81       	ldd	r17, Y+3	; 0x03
    22b4:	aa 81       	ldd	r26, Y+2	; 0x02
    22b6:	b9 81       	ldd	r27, Y+1	; 0x01
    22b8:	ce 0f       	add	r28, r30
    22ba:	d1 1d       	adc	r29, r1
    22bc:	0f b6       	in	r0, 0x3f	; 63
    22be:	f8 94       	cli
    22c0:	de bf       	out	0x3e, r29	; 62
    22c2:	0f be       	out	0x3f, r0	; 63
    22c4:	cd bf       	out	0x3d, r28	; 61
    22c6:	ed 01       	movw	r28, r26
    22c8:	08 95       	ret

000022ca <itoa>:
    22ca:	fb 01       	movw	r30, r22
    22cc:	9f 01       	movw	r18, r30
    22ce:	e8 94       	clt
    22d0:	42 30       	cpi	r20, 0x02	; 2
    22d2:	c4 f0       	brlt	.+48     	; 0x2304 <itoa+0x3a>
    22d4:	45 32       	cpi	r20, 0x25	; 37
    22d6:	b4 f4       	brge	.+44     	; 0x2304 <itoa+0x3a>
    22d8:	4a 30       	cpi	r20, 0x0A	; 10
    22da:	29 f4       	brne	.+10     	; 0x22e6 <itoa+0x1c>
    22dc:	97 fb       	bst	r25, 7
    22de:	1e f4       	brtc	.+6      	; 0x22e6 <itoa+0x1c>
    22e0:	90 95       	com	r25
    22e2:	81 95       	neg	r24
    22e4:	9f 4f       	sbci	r25, 0xFF	; 255
    22e6:	64 2f       	mov	r22, r20
    22e8:	77 27       	eor	r23, r23
    22ea:	0e 94 1a 11 	call	0x2234	; 0x2234 <__udivmodhi4>
    22ee:	80 5d       	subi	r24, 0xD0	; 208
    22f0:	8a 33       	cpi	r24, 0x3A	; 58
    22f2:	0c f0       	brlt	.+2      	; 0x22f6 <itoa+0x2c>
    22f4:	89 5d       	subi	r24, 0xD9	; 217
    22f6:	81 93       	st	Z+, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	00 97       	sbiw	r24, 0x00	; 0
    22fc:	a1 f7       	brne	.-24     	; 0x22e6 <itoa+0x1c>
    22fe:	16 f4       	brtc	.+4      	; 0x2304 <itoa+0x3a>
    2300:	5d e2       	ldi	r21, 0x2D	; 45
    2302:	51 93       	st	Z+, r21
    2304:	10 82       	st	Z, r1
    2306:	c9 01       	movw	r24, r18
    2308:	0c 94 86 11 	jmp	0x230c	; 0x230c <strrev>

0000230c <strrev>:
    230c:	dc 01       	movw	r26, r24
    230e:	fc 01       	movw	r30, r24
    2310:	67 2f       	mov	r22, r23
    2312:	71 91       	ld	r23, Z+
    2314:	77 23       	and	r23, r23
    2316:	e1 f7       	brne	.-8      	; 0x2310 <strrev+0x4>
    2318:	32 97       	sbiw	r30, 0x02	; 2
    231a:	04 c0       	rjmp	.+8      	; 0x2324 <strrev+0x18>
    231c:	7c 91       	ld	r23, X
    231e:	6d 93       	st	X+, r22
    2320:	70 83       	st	Z, r23
    2322:	62 91       	ld	r22, -Z
    2324:	ae 17       	cp	r26, r30
    2326:	bf 07       	cpc	r27, r31
    2328:	c8 f3       	brcs	.-14     	; 0x231c <strrev+0x10>
    232a:	08 95       	ret

0000232c <_exit>:
    232c:	f8 94       	cli

0000232e <__stop_program>:
    232e:	ff cf       	rjmp	.-2      	; 0x232e <__stop_program>
